
receiver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000077a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000077a  000007ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000007f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000e0  00000000  00000000  00000f48  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bea  00000000  00000000  00001028  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000433  00000000  00000000  00001c12  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006dc  00000000  00000000  00002045  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001cc  00000000  00000000  00002724  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000253  00000000  00000000  000028f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005ef  00000000  00000000  00002b43  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e7       	ldi	r30, 0x7A	; 122
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <main>
  8a:	0c 94 bb 03 	jmp	0x776	; 0x776 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <set_pin>:
#include <avr/io.h>
#include "std_macros.h"

void set_pin(char port_name,char pin_number,char direction)
{
	switch(port_name)
  92:	84 34       	cpi	r24, 0x44	; 68
  94:	09 f4       	brne	.+2      	; 0x98 <set_pin+0x6>
  96:	71 c0       	rjmp	.+226    	; 0x17a <set_pin+0xe8>
  98:	85 34       	cpi	r24, 0x45	; 69
  9a:	48 f4       	brcc	.+18     	; 0xae <set_pin+0x1c>
  9c:	82 34       	cpi	r24, 0x42	; 66
  9e:	99 f1       	breq	.+102    	; 0x106 <set_pin+0x74>
  a0:	83 34       	cpi	r24, 0x43	; 67
  a2:	08 f0       	brcs	.+2      	; 0xa6 <set_pin+0x14>
  a4:	4d c0       	rjmp	.+154    	; 0x140 <set_pin+0xae>
  a6:	81 34       	cpi	r24, 0x41	; 65
  a8:	09 f0       	breq	.+2      	; 0xac <set_pin+0x1a>
  aa:	83 c0       	rjmp	.+262    	; 0x1b2 <set_pin+0x120>
  ac:	0f c0       	rjmp	.+30     	; 0xcc <set_pin+0x3a>
  ae:	82 36       	cpi	r24, 0x62	; 98
  b0:	51 f1       	breq	.+84     	; 0x106 <set_pin+0x74>
  b2:	83 36       	cpi	r24, 0x63	; 99
  b4:	20 f4       	brcc	.+8      	; 0xbe <set_pin+0x2c>
  b6:	81 36       	cpi	r24, 0x61	; 97
  b8:	09 f0       	breq	.+2      	; 0xbc <set_pin+0x2a>
  ba:	7b c0       	rjmp	.+246    	; 0x1b2 <set_pin+0x120>
  bc:	07 c0       	rjmp	.+14     	; 0xcc <set_pin+0x3a>
  be:	83 36       	cpi	r24, 0x63	; 99
  c0:	09 f4       	brne	.+2      	; 0xc4 <set_pin+0x32>
  c2:	3e c0       	rjmp	.+124    	; 0x140 <set_pin+0xae>
  c4:	84 36       	cpi	r24, 0x64	; 100
  c6:	09 f0       	breq	.+2      	; 0xca <set_pin+0x38>
  c8:	74 c0       	rjmp	.+232    	; 0x1b2 <set_pin+0x120>
  ca:	57 c0       	rjmp	.+174    	; 0x17a <set_pin+0xe8>
	{
		case 'A':
		case 'a':
		if (direction==1)
  cc:	41 30       	cpi	r20, 0x01	; 1
  ce:	69 f4       	brne	.+26     	; 0xea <set_pin+0x58>
		{
			SET_BIT(DDRA,pin_number);
  d0:	2a b3       	in	r18, 0x1a	; 26
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	ac 01       	movw	r20, r24
  d8:	02 c0       	rjmp	.+4      	; 0xde <set_pin+0x4c>
  da:	44 0f       	add	r20, r20
  dc:	55 1f       	adc	r21, r21
  de:	6a 95       	dec	r22
  e0:	e2 f7       	brpl	.-8      	; 0xda <set_pin+0x48>
  e2:	ba 01       	movw	r22, r20
  e4:	62 2b       	or	r22, r18
  e6:	6a bb       	out	0x1a, r22	; 26
  e8:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRA,pin_number);
  ea:	2a b3       	in	r18, 0x1a	; 26
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	ac 01       	movw	r20, r24
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <set_pin+0x66>
  f4:	44 0f       	add	r20, r20
  f6:	55 1f       	adc	r21, r21
  f8:	6a 95       	dec	r22
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <set_pin+0x62>
  fc:	ba 01       	movw	r22, r20
  fe:	60 95       	com	r22
 100:	62 23       	and	r22, r18
 102:	6a bb       	out	0x1a, r22	; 26
 104:	08 95       	ret
		}			
		break;
		
		case 'B':
		case 'b':
		if (direction==1)
 106:	41 30       	cpi	r20, 0x01	; 1
 108:	69 f4       	brne	.+26     	; 0x124 <set_pin+0x92>
		{
			SET_BIT(DDRB,pin_number);
 10a:	27 b3       	in	r18, 0x17	; 23
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	ac 01       	movw	r20, r24
 112:	02 c0       	rjmp	.+4      	; 0x118 <set_pin+0x86>
 114:	44 0f       	add	r20, r20
 116:	55 1f       	adc	r21, r21
 118:	6a 95       	dec	r22
 11a:	e2 f7       	brpl	.-8      	; 0x114 <set_pin+0x82>
 11c:	ba 01       	movw	r22, r20
 11e:	62 2b       	or	r22, r18
 120:	67 bb       	out	0x17, r22	; 23
 122:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRB,pin_number);
 124:	27 b3       	in	r18, 0x17	; 23
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	ac 01       	movw	r20, r24
 12c:	02 c0       	rjmp	.+4      	; 0x132 <set_pin+0xa0>
 12e:	44 0f       	add	r20, r20
 130:	55 1f       	adc	r21, r21
 132:	6a 95       	dec	r22
 134:	e2 f7       	brpl	.-8      	; 0x12e <set_pin+0x9c>
 136:	ba 01       	movw	r22, r20
 138:	60 95       	com	r22
 13a:	62 23       	and	r22, r18
 13c:	67 bb       	out	0x17, r22	; 23
 13e:	08 95       	ret
		}
		break;
		case 'C':
		case 'c':
		if (direction==1)
 140:	41 30       	cpi	r20, 0x01	; 1
 142:	69 f4       	brne	.+26     	; 0x15e <set_pin+0xcc>
		{
			SET_BIT(DDRC,pin_number);
 144:	24 b3       	in	r18, 0x14	; 20
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	ac 01       	movw	r20, r24
 14c:	02 c0       	rjmp	.+4      	; 0x152 <set_pin+0xc0>
 14e:	44 0f       	add	r20, r20
 150:	55 1f       	adc	r21, r21
 152:	6a 95       	dec	r22
 154:	e2 f7       	brpl	.-8      	; 0x14e <set_pin+0xbc>
 156:	ba 01       	movw	r22, r20
 158:	62 2b       	or	r22, r18
 15a:	64 bb       	out	0x14, r22	; 20
 15c:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRC,pin_number);
 15e:	24 b3       	in	r18, 0x14	; 20
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	ac 01       	movw	r20, r24
 166:	02 c0       	rjmp	.+4      	; 0x16c <set_pin+0xda>
 168:	44 0f       	add	r20, r20
 16a:	55 1f       	adc	r21, r21
 16c:	6a 95       	dec	r22
 16e:	e2 f7       	brpl	.-8      	; 0x168 <set_pin+0xd6>
 170:	ba 01       	movw	r22, r20
 172:	60 95       	com	r22
 174:	62 23       	and	r22, r18
 176:	64 bb       	out	0x14, r22	; 20
 178:	08 95       	ret
		}
		break;
		
		case 'D':
		case 'd':
		if (direction==1)
 17a:	41 30       	cpi	r20, 0x01	; 1
 17c:	69 f4       	brne	.+26     	; 0x198 <set_pin+0x106>
		{
			SET_BIT(DDRD,pin_number);
 17e:	21 b3       	in	r18, 0x11	; 17
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	ac 01       	movw	r20, r24
 186:	02 c0       	rjmp	.+4      	; 0x18c <set_pin+0xfa>
 188:	44 0f       	add	r20, r20
 18a:	55 1f       	adc	r21, r21
 18c:	6a 95       	dec	r22
 18e:	e2 f7       	brpl	.-8      	; 0x188 <set_pin+0xf6>
 190:	ba 01       	movw	r22, r20
 192:	62 2b       	or	r22, r18
 194:	61 bb       	out	0x11, r22	; 17
 196:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRD,pin_number);
 198:	21 b3       	in	r18, 0x11	; 17
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	ac 01       	movw	r20, r24
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <set_pin+0x114>
 1a2:	44 0f       	add	r20, r20
 1a4:	55 1f       	adc	r21, r21
 1a6:	6a 95       	dec	r22
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <set_pin+0x110>
 1aa:	ba 01       	movw	r22, r20
 1ac:	60 95       	com	r22
 1ae:	62 23       	and	r22, r18
 1b0:	61 bb       	out	0x11, r22	; 17
 1b2:	08 95       	ret

000001b4 <write_pin>:
	}
}

void write_pin(char port_name,char pin_number,char val)
{
	switch(port_name)
 1b4:	84 34       	cpi	r24, 0x44	; 68
 1b6:	09 f4       	brne	.+2      	; 0x1ba <write_pin+0x6>
 1b8:	71 c0       	rjmp	.+226    	; 0x29c <write_pin+0xe8>
 1ba:	85 34       	cpi	r24, 0x45	; 69
 1bc:	48 f4       	brcc	.+18     	; 0x1d0 <write_pin+0x1c>
 1be:	82 34       	cpi	r24, 0x42	; 66
 1c0:	99 f1       	breq	.+102    	; 0x228 <write_pin+0x74>
 1c2:	83 34       	cpi	r24, 0x43	; 67
 1c4:	08 f0       	brcs	.+2      	; 0x1c8 <write_pin+0x14>
 1c6:	4d c0       	rjmp	.+154    	; 0x262 <write_pin+0xae>
 1c8:	81 34       	cpi	r24, 0x41	; 65
 1ca:	09 f0       	breq	.+2      	; 0x1ce <write_pin+0x1a>
 1cc:	83 c0       	rjmp	.+262    	; 0x2d4 <write_pin+0x120>
 1ce:	0f c0       	rjmp	.+30     	; 0x1ee <write_pin+0x3a>
 1d0:	82 36       	cpi	r24, 0x62	; 98
 1d2:	51 f1       	breq	.+84     	; 0x228 <write_pin+0x74>
 1d4:	83 36       	cpi	r24, 0x63	; 99
 1d6:	20 f4       	brcc	.+8      	; 0x1e0 <write_pin+0x2c>
 1d8:	81 36       	cpi	r24, 0x61	; 97
 1da:	09 f0       	breq	.+2      	; 0x1de <write_pin+0x2a>
 1dc:	7b c0       	rjmp	.+246    	; 0x2d4 <write_pin+0x120>
 1de:	07 c0       	rjmp	.+14     	; 0x1ee <write_pin+0x3a>
 1e0:	83 36       	cpi	r24, 0x63	; 99
 1e2:	09 f4       	brne	.+2      	; 0x1e6 <write_pin+0x32>
 1e4:	3e c0       	rjmp	.+124    	; 0x262 <write_pin+0xae>
 1e6:	84 36       	cpi	r24, 0x64	; 100
 1e8:	09 f0       	breq	.+2      	; 0x1ec <write_pin+0x38>
 1ea:	74 c0       	rjmp	.+232    	; 0x2d4 <write_pin+0x120>
 1ec:	57 c0       	rjmp	.+174    	; 0x29c <write_pin+0xe8>
	{
		case 'A':
		case 'a':
		if (val==1)
 1ee:	41 30       	cpi	r20, 0x01	; 1
 1f0:	69 f4       	brne	.+26     	; 0x20c <write_pin+0x58>
		{
			SET_BIT(PORTA,pin_number);
 1f2:	2b b3       	in	r18, 0x1b	; 27
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	ac 01       	movw	r20, r24
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <write_pin+0x4c>
 1fc:	44 0f       	add	r20, r20
 1fe:	55 1f       	adc	r21, r21
 200:	6a 95       	dec	r22
 202:	e2 f7       	brpl	.-8      	; 0x1fc <write_pin+0x48>
 204:	ba 01       	movw	r22, r20
 206:	62 2b       	or	r22, r18
 208:	6b bb       	out	0x1b, r22	; 27
 20a:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pin_number);
 20c:	2b b3       	in	r18, 0x1b	; 27
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	ac 01       	movw	r20, r24
 214:	02 c0       	rjmp	.+4      	; 0x21a <write_pin+0x66>
 216:	44 0f       	add	r20, r20
 218:	55 1f       	adc	r21, r21
 21a:	6a 95       	dec	r22
 21c:	e2 f7       	brpl	.-8      	; 0x216 <write_pin+0x62>
 21e:	ba 01       	movw	r22, r20
 220:	60 95       	com	r22
 222:	62 23       	and	r22, r18
 224:	6b bb       	out	0x1b, r22	; 27
 226:	08 95       	ret
		}
		break;
		
		case 'B':
		case 'b':
		if (val==1)
 228:	41 30       	cpi	r20, 0x01	; 1
 22a:	69 f4       	brne	.+26     	; 0x246 <write_pin+0x92>
		{
			SET_BIT(PORTB,pin_number);
 22c:	28 b3       	in	r18, 0x18	; 24
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	ac 01       	movw	r20, r24
 234:	02 c0       	rjmp	.+4      	; 0x23a <write_pin+0x86>
 236:	44 0f       	add	r20, r20
 238:	55 1f       	adc	r21, r21
 23a:	6a 95       	dec	r22
 23c:	e2 f7       	brpl	.-8      	; 0x236 <write_pin+0x82>
 23e:	ba 01       	movw	r22, r20
 240:	62 2b       	or	r22, r18
 242:	68 bb       	out	0x18, r22	; 24
 244:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pin_number);
 246:	28 b3       	in	r18, 0x18	; 24
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	ac 01       	movw	r20, r24
 24e:	02 c0       	rjmp	.+4      	; 0x254 <write_pin+0xa0>
 250:	44 0f       	add	r20, r20
 252:	55 1f       	adc	r21, r21
 254:	6a 95       	dec	r22
 256:	e2 f7       	brpl	.-8      	; 0x250 <write_pin+0x9c>
 258:	ba 01       	movw	r22, r20
 25a:	60 95       	com	r22
 25c:	62 23       	and	r22, r18
 25e:	68 bb       	out	0x18, r22	; 24
 260:	08 95       	ret
		}
		break;
		
		case 'C':
		case 'c':
		if (val==1)
 262:	41 30       	cpi	r20, 0x01	; 1
 264:	69 f4       	brne	.+26     	; 0x280 <write_pin+0xcc>
		{
			SET_BIT(PORTC,pin_number);
 266:	25 b3       	in	r18, 0x15	; 21
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	ac 01       	movw	r20, r24
 26e:	02 c0       	rjmp	.+4      	; 0x274 <write_pin+0xc0>
 270:	44 0f       	add	r20, r20
 272:	55 1f       	adc	r21, r21
 274:	6a 95       	dec	r22
 276:	e2 f7       	brpl	.-8      	; 0x270 <write_pin+0xbc>
 278:	ba 01       	movw	r22, r20
 27a:	62 2b       	or	r22, r18
 27c:	65 bb       	out	0x15, r22	; 21
 27e:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pin_number);
 280:	25 b3       	in	r18, 0x15	; 21
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	ac 01       	movw	r20, r24
 288:	02 c0       	rjmp	.+4      	; 0x28e <write_pin+0xda>
 28a:	44 0f       	add	r20, r20
 28c:	55 1f       	adc	r21, r21
 28e:	6a 95       	dec	r22
 290:	e2 f7       	brpl	.-8      	; 0x28a <write_pin+0xd6>
 292:	ba 01       	movw	r22, r20
 294:	60 95       	com	r22
 296:	62 23       	and	r22, r18
 298:	65 bb       	out	0x15, r22	; 21
 29a:	08 95       	ret
		}
		break;
		
		case 'D':
		case 'd':
		if (val==1)
 29c:	41 30       	cpi	r20, 0x01	; 1
 29e:	69 f4       	brne	.+26     	; 0x2ba <write_pin+0x106>
		{
			SET_BIT(PORTD,pin_number);
 2a0:	22 b3       	in	r18, 0x12	; 18
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	ac 01       	movw	r20, r24
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <write_pin+0xfa>
 2aa:	44 0f       	add	r20, r20
 2ac:	55 1f       	adc	r21, r21
 2ae:	6a 95       	dec	r22
 2b0:	e2 f7       	brpl	.-8      	; 0x2aa <write_pin+0xf6>
 2b2:	ba 01       	movw	r22, r20
 2b4:	62 2b       	or	r22, r18
 2b6:	62 bb       	out	0x12, r22	; 18
 2b8:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pin_number);
 2ba:	22 b3       	in	r18, 0x12	; 18
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	ac 01       	movw	r20, r24
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <write_pin+0x114>
 2c4:	44 0f       	add	r20, r20
 2c6:	55 1f       	adc	r21, r21
 2c8:	6a 95       	dec	r22
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <write_pin+0x110>
 2cc:	ba 01       	movw	r22, r20
 2ce:	60 95       	com	r22
 2d0:	62 23       	and	r22, r18
 2d2:	62 bb       	out	0x12, r22	; 18
 2d4:	08 95       	ret

000002d6 <read_pin>:
}

char read_pin(char port_name,char pin_number)
{
	char val;
	switch(port_name)
 2d6:	84 34       	cpi	r24, 0x44	; 68
 2d8:	09 f4       	brne	.+2      	; 0x2dc <read_pin+0x6>
 2da:	51 c0       	rjmp	.+162    	; 0x37e <read_pin+0xa8>
 2dc:	85 34       	cpi	r24, 0x45	; 69
 2de:	40 f4       	brcc	.+16     	; 0x2f0 <read_pin+0x1a>
 2e0:	82 34       	cpi	r24, 0x42	; 66
 2e2:	39 f1       	breq	.+78     	; 0x332 <read_pin+0x5c>
 2e4:	83 34       	cpi	r24, 0x43	; 67
 2e6:	c0 f5       	brcc	.+112    	; 0x358 <read_pin+0x82>
 2e8:	81 34       	cpi	r24, 0x41	; 65
 2ea:	09 f0       	breq	.+2      	; 0x2ee <read_pin+0x18>
 2ec:	5a c0       	rjmp	.+180    	; 0x3a2 <read_pin+0xcc>
 2ee:	0e c0       	rjmp	.+28     	; 0x30c <read_pin+0x36>
 2f0:	82 36       	cpi	r24, 0x62	; 98
 2f2:	f9 f0       	breq	.+62     	; 0x332 <read_pin+0x5c>
 2f4:	83 36       	cpi	r24, 0x63	; 99
 2f6:	20 f4       	brcc	.+8      	; 0x300 <read_pin+0x2a>
 2f8:	81 36       	cpi	r24, 0x61	; 97
 2fa:	09 f0       	breq	.+2      	; 0x2fe <read_pin+0x28>
 2fc:	52 c0       	rjmp	.+164    	; 0x3a2 <read_pin+0xcc>
 2fe:	06 c0       	rjmp	.+12     	; 0x30c <read_pin+0x36>
 300:	83 36       	cpi	r24, 0x63	; 99
 302:	51 f1       	breq	.+84     	; 0x358 <read_pin+0x82>
 304:	84 36       	cpi	r24, 0x64	; 100
 306:	09 f0       	breq	.+2      	; 0x30a <read_pin+0x34>
 308:	4c c0       	rjmp	.+152    	; 0x3a2 <read_pin+0xcc>
 30a:	39 c0       	rjmp	.+114    	; 0x37e <read_pin+0xa8>
	{
		case 'A':
		case 'a':
		val= READ_BIT(PINA,pin_number);
 30c:	29 b3       	in	r18, 0x19	; 25
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	06 2e       	mov	r0, r22
 314:	02 c0       	rjmp	.+4      	; 0x31a <read_pin+0x44>
 316:	88 0f       	add	r24, r24
 318:	99 1f       	adc	r25, r25
 31a:	0a 94       	dec	r0
 31c:	e2 f7       	brpl	.-8      	; 0x316 <read_pin+0x40>
 31e:	30 e0       	ldi	r19, 0x00	; 0
 320:	82 23       	and	r24, r18
 322:	93 23       	and	r25, r19
 324:	02 c0       	rjmp	.+4      	; 0x32a <read_pin+0x54>
 326:	95 95       	asr	r25
 328:	87 95       	ror	r24
 32a:	6a 95       	dec	r22
 32c:	e2 f7       	brpl	.-8      	; 0x326 <read_pin+0x50>
 32e:	98 2f       	mov	r25, r24
		break;
 330:	38 c0       	rjmp	.+112    	; 0x3a2 <read_pin+0xcc>
		
		case 'B':
		case 'b':
		val=  READ_BIT(PINB,pin_number);
 332:	26 b3       	in	r18, 0x16	; 22
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	06 2e       	mov	r0, r22
 33a:	02 c0       	rjmp	.+4      	; 0x340 <read_pin+0x6a>
 33c:	88 0f       	add	r24, r24
 33e:	99 1f       	adc	r25, r25
 340:	0a 94       	dec	r0
 342:	e2 f7       	brpl	.-8      	; 0x33c <read_pin+0x66>
 344:	30 e0       	ldi	r19, 0x00	; 0
 346:	82 23       	and	r24, r18
 348:	93 23       	and	r25, r19
 34a:	02 c0       	rjmp	.+4      	; 0x350 <read_pin+0x7a>
 34c:	95 95       	asr	r25
 34e:	87 95       	ror	r24
 350:	6a 95       	dec	r22
 352:	e2 f7       	brpl	.-8      	; 0x34c <read_pin+0x76>
 354:	98 2f       	mov	r25, r24
		break;
 356:	25 c0       	rjmp	.+74     	; 0x3a2 <read_pin+0xcc>
		
		case 'C':
		case 'c':
		val=  READ_BIT(PINC,pin_number);
 358:	23 b3       	in	r18, 0x13	; 19
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	06 2e       	mov	r0, r22
 360:	02 c0       	rjmp	.+4      	; 0x366 <read_pin+0x90>
 362:	88 0f       	add	r24, r24
 364:	99 1f       	adc	r25, r25
 366:	0a 94       	dec	r0
 368:	e2 f7       	brpl	.-8      	; 0x362 <read_pin+0x8c>
 36a:	30 e0       	ldi	r19, 0x00	; 0
 36c:	82 23       	and	r24, r18
 36e:	93 23       	and	r25, r19
 370:	02 c0       	rjmp	.+4      	; 0x376 <read_pin+0xa0>
 372:	95 95       	asr	r25
 374:	87 95       	ror	r24
 376:	6a 95       	dec	r22
 378:	e2 f7       	brpl	.-8      	; 0x372 <read_pin+0x9c>
 37a:	98 2f       	mov	r25, r24
		break;
 37c:	12 c0       	rjmp	.+36     	; 0x3a2 <read_pin+0xcc>
		
		case 'D':
		case 'd':
		val=  READ_BIT(PIND,pin_number);
 37e:	20 b3       	in	r18, 0x10	; 16
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	06 2e       	mov	r0, r22
 386:	02 c0       	rjmp	.+4      	; 0x38c <read_pin+0xb6>
 388:	88 0f       	add	r24, r24
 38a:	99 1f       	adc	r25, r25
 38c:	0a 94       	dec	r0
 38e:	e2 f7       	brpl	.-8      	; 0x388 <read_pin+0xb2>
 390:	30 e0       	ldi	r19, 0x00	; 0
 392:	82 23       	and	r24, r18
 394:	93 23       	and	r25, r19
 396:	02 c0       	rjmp	.+4      	; 0x39c <read_pin+0xc6>
 398:	95 95       	asr	r25
 39a:	87 95       	ror	r24
 39c:	6a 95       	dec	r22
 39e:	e2 f7       	brpl	.-8      	; 0x398 <read_pin+0xc2>
 3a0:	98 2f       	mov	r25, r24
		break;
		default:
		break;
	}
	 return val;
}			
 3a2:	89 2f       	mov	r24, r25
 3a4:	08 95       	ret

000003a6 <toggle_pin>:

void toggle_pin(char port_name,char pin_number)
{
	switch(port_name)
 3a6:	84 34       	cpi	r24, 0x44	; 68
 3a8:	09 f4       	brne	.+2      	; 0x3ac <toggle_pin+0x6>
 3aa:	3d c0       	rjmp	.+122    	; 0x426 <toggle_pin+0x80>
 3ac:	85 34       	cpi	r24, 0x45	; 69
 3ae:	40 f4       	brcc	.+16     	; 0x3c0 <toggle_pin+0x1a>
 3b0:	82 34       	cpi	r24, 0x42	; 66
 3b2:	f9 f0       	breq	.+62     	; 0x3f2 <toggle_pin+0x4c>
 3b4:	83 34       	cpi	r24, 0x43	; 67
 3b6:	50 f5       	brcc	.+84     	; 0x40c <toggle_pin+0x66>
 3b8:	81 34       	cpi	r24, 0x41	; 65
 3ba:	09 f0       	breq	.+2      	; 0x3be <toggle_pin+0x18>
 3bc:	40 c0       	rjmp	.+128    	; 0x43e <toggle_pin+0x98>
 3be:	0c c0       	rjmp	.+24     	; 0x3d8 <toggle_pin+0x32>
 3c0:	82 36       	cpi	r24, 0x62	; 98
 3c2:	b9 f0       	breq	.+46     	; 0x3f2 <toggle_pin+0x4c>
 3c4:	83 36       	cpi	r24, 0x63	; 99
 3c6:	18 f4       	brcc	.+6      	; 0x3ce <toggle_pin+0x28>
 3c8:	81 36       	cpi	r24, 0x61	; 97
 3ca:	c9 f5       	brne	.+114    	; 0x43e <toggle_pin+0x98>
 3cc:	05 c0       	rjmp	.+10     	; 0x3d8 <toggle_pin+0x32>
 3ce:	83 36       	cpi	r24, 0x63	; 99
 3d0:	e9 f0       	breq	.+58     	; 0x40c <toggle_pin+0x66>
 3d2:	84 36       	cpi	r24, 0x64	; 100
 3d4:	a1 f5       	brne	.+104    	; 0x43e <toggle_pin+0x98>
 3d6:	27 c0       	rjmp	.+78     	; 0x426 <toggle_pin+0x80>
	{
		case 'A':
		case 'a':
		TOG_BIT(PORTA,pin_number);
 3d8:	2b b3       	in	r18, 0x1b	; 27
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	ac 01       	movw	r20, r24
 3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <toggle_pin+0x40>
 3e2:	44 0f       	add	r20, r20
 3e4:	55 1f       	adc	r21, r21
 3e6:	6a 95       	dec	r22
 3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <toggle_pin+0x3c>
 3ea:	ba 01       	movw	r22, r20
 3ec:	62 27       	eor	r22, r18
 3ee:	6b bb       	out	0x1b, r22	; 27
		break;
 3f0:	08 95       	ret
		
		case 'B':
		case 'b':
		TOG_BIT(PORTB,pin_number);
 3f2:	28 b3       	in	r18, 0x18	; 24
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	ac 01       	movw	r20, r24
 3fa:	02 c0       	rjmp	.+4      	; 0x400 <toggle_pin+0x5a>
 3fc:	44 0f       	add	r20, r20
 3fe:	55 1f       	adc	r21, r21
 400:	6a 95       	dec	r22
 402:	e2 f7       	brpl	.-8      	; 0x3fc <toggle_pin+0x56>
 404:	ba 01       	movw	r22, r20
 406:	62 27       	eor	r22, r18
 408:	68 bb       	out	0x18, r22	; 24
		break;
 40a:	08 95       	ret
		case 'C':
		case 'c':
		TOG_BIT(PORTC,pin_number);
 40c:	25 b3       	in	r18, 0x15	; 21
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	ac 01       	movw	r20, r24
 414:	02 c0       	rjmp	.+4      	; 0x41a <toggle_pin+0x74>
 416:	44 0f       	add	r20, r20
 418:	55 1f       	adc	r21, r21
 41a:	6a 95       	dec	r22
 41c:	e2 f7       	brpl	.-8      	; 0x416 <toggle_pin+0x70>
 41e:	ba 01       	movw	r22, r20
 420:	62 27       	eor	r22, r18
 422:	65 bb       	out	0x15, r22	; 21
		break;
 424:	08 95       	ret
		case 'D':
		case 'd':
		TOG_BIT(PORTD,pin_number);
 426:	22 b3       	in	r18, 0x12	; 18
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	ac 01       	movw	r20, r24
 42e:	02 c0       	rjmp	.+4      	; 0x434 <toggle_pin+0x8e>
 430:	44 0f       	add	r20, r20
 432:	55 1f       	adc	r21, r21
 434:	6a 95       	dec	r22
 436:	e2 f7       	brpl	.-8      	; 0x430 <toggle_pin+0x8a>
 438:	ba 01       	movw	r22, r20
 43a:	62 27       	eor	r22, r18
 43c:	62 bb       	out	0x12, r22	; 18
 43e:	08 95       	ret

00000440 <set_port>:
	}		
}

void set_port (char port_name,char direction)
{
	switch(port_name)
 440:	84 34       	cpi	r24, 0x44	; 68
 442:	d9 f0       	breq	.+54     	; 0x47a <set_port+0x3a>
 444:	85 34       	cpi	r24, 0x45	; 69
 446:	38 f4       	brcc	.+14     	; 0x456 <set_port+0x16>
 448:	82 34       	cpi	r24, 0x42	; 66
 44a:	99 f0       	breq	.+38     	; 0x472 <set_port+0x32>
 44c:	83 34       	cpi	r24, 0x43	; 67
 44e:	98 f4       	brcc	.+38     	; 0x476 <set_port+0x36>
 450:	81 34       	cpi	r24, 0x41	; 65
 452:	a1 f4       	brne	.+40     	; 0x47c <set_port+0x3c>
 454:	0c c0       	rjmp	.+24     	; 0x46e <set_port+0x2e>
 456:	82 36       	cpi	r24, 0x62	; 98
 458:	61 f0       	breq	.+24     	; 0x472 <set_port+0x32>
 45a:	83 36       	cpi	r24, 0x63	; 99
 45c:	18 f4       	brcc	.+6      	; 0x464 <set_port+0x24>
 45e:	81 36       	cpi	r24, 0x61	; 97
 460:	69 f4       	brne	.+26     	; 0x47c <set_port+0x3c>
 462:	05 c0       	rjmp	.+10     	; 0x46e <set_port+0x2e>
 464:	83 36       	cpi	r24, 0x63	; 99
 466:	39 f0       	breq	.+14     	; 0x476 <set_port+0x36>
 468:	84 36       	cpi	r24, 0x64	; 100
 46a:	41 f4       	brne	.+16     	; 0x47c <set_port+0x3c>
 46c:	06 c0       	rjmp	.+12     	; 0x47a <set_port+0x3a>
	{
		case 'A':
		case 'a':
		DDRA=direction;
 46e:	6a bb       	out	0x1a, r22	; 26
		break;
 470:	08 95       	ret
		case 'B':
		case 'b':
		DDRB=direction;
 472:	67 bb       	out	0x17, r22	; 23
		break;
 474:	08 95       	ret
		case 'C':
		case 'c':
		DDRC=direction;
 476:	64 bb       	out	0x14, r22	; 20
		break;
 478:	08 95       	ret
		case 'D':
		case 'd':
		DDRD=direction;
 47a:	61 bb       	out	0x11, r22	; 17
 47c:	08 95       	ret

0000047e <write_port>:
		break;
	}			
}
void write_port (char port_name,char val)
{
	switch(port_name)
 47e:	84 34       	cpi	r24, 0x44	; 68
 480:	d9 f0       	breq	.+54     	; 0x4b8 <write_port+0x3a>
 482:	85 34       	cpi	r24, 0x45	; 69
 484:	38 f4       	brcc	.+14     	; 0x494 <write_port+0x16>
 486:	82 34       	cpi	r24, 0x42	; 66
 488:	99 f0       	breq	.+38     	; 0x4b0 <write_port+0x32>
 48a:	83 34       	cpi	r24, 0x43	; 67
 48c:	98 f4       	brcc	.+38     	; 0x4b4 <write_port+0x36>
 48e:	81 34       	cpi	r24, 0x41	; 65
 490:	a1 f4       	brne	.+40     	; 0x4ba <write_port+0x3c>
 492:	0c c0       	rjmp	.+24     	; 0x4ac <write_port+0x2e>
 494:	82 36       	cpi	r24, 0x62	; 98
 496:	61 f0       	breq	.+24     	; 0x4b0 <write_port+0x32>
 498:	83 36       	cpi	r24, 0x63	; 99
 49a:	18 f4       	brcc	.+6      	; 0x4a2 <write_port+0x24>
 49c:	81 36       	cpi	r24, 0x61	; 97
 49e:	69 f4       	brne	.+26     	; 0x4ba <write_port+0x3c>
 4a0:	05 c0       	rjmp	.+10     	; 0x4ac <write_port+0x2e>
 4a2:	83 36       	cpi	r24, 0x63	; 99
 4a4:	39 f0       	breq	.+14     	; 0x4b4 <write_port+0x36>
 4a6:	84 36       	cpi	r24, 0x64	; 100
 4a8:	41 f4       	brne	.+16     	; 0x4ba <write_port+0x3c>
 4aa:	06 c0       	rjmp	.+12     	; 0x4b8 <write_port+0x3a>
	{
		case 'A':
		case 'a':
		PORTA=val;
 4ac:	6b bb       	out	0x1b, r22	; 27
		break;
 4ae:	08 95       	ret
		case 'B':
		case 'b':
		PORTB=val;
 4b0:	68 bb       	out	0x18, r22	; 24
		break;
 4b2:	08 95       	ret
		case 'C':
		case 'c':
		PORTC=val;
 4b4:	65 bb       	out	0x15, r22	; 21
		break;
 4b6:	08 95       	ret
		case 'D':
		case 'd':
		PORTD=val;
 4b8:	62 bb       	out	0x12, r22	; 18
 4ba:	08 95       	ret

000004bc <read_port>:

char read_port(char port_name)
{
	unsigned char val;
	
	switch(port_name)
 4bc:	84 34       	cpi	r24, 0x44	; 68
 4be:	d9 f0       	breq	.+54     	; 0x4f6 <read_port+0x3a>
 4c0:	85 34       	cpi	r24, 0x45	; 69
 4c2:	38 f4       	brcc	.+14     	; 0x4d2 <read_port+0x16>
 4c4:	82 34       	cpi	r24, 0x42	; 66
 4c6:	99 f0       	breq	.+38     	; 0x4ee <read_port+0x32>
 4c8:	83 34       	cpi	r24, 0x43	; 67
 4ca:	98 f4       	brcc	.+38     	; 0x4f2 <read_port+0x36>
 4cc:	81 34       	cpi	r24, 0x41	; 65
 4ce:	a1 f4       	brne	.+40     	; 0x4f8 <read_port+0x3c>
 4d0:	0c c0       	rjmp	.+24     	; 0x4ea <read_port+0x2e>
 4d2:	82 36       	cpi	r24, 0x62	; 98
 4d4:	61 f0       	breq	.+24     	; 0x4ee <read_port+0x32>
 4d6:	83 36       	cpi	r24, 0x63	; 99
 4d8:	18 f4       	brcc	.+6      	; 0x4e0 <read_port+0x24>
 4da:	81 36       	cpi	r24, 0x61	; 97
 4dc:	69 f4       	brne	.+26     	; 0x4f8 <read_port+0x3c>
 4de:	05 c0       	rjmp	.+10     	; 0x4ea <read_port+0x2e>
 4e0:	83 36       	cpi	r24, 0x63	; 99
 4e2:	39 f0       	breq	.+14     	; 0x4f2 <read_port+0x36>
 4e4:	84 36       	cpi	r24, 0x64	; 100
 4e6:	41 f4       	brne	.+16     	; 0x4f8 <read_port+0x3c>
 4e8:	06 c0       	rjmp	.+12     	; 0x4f6 <read_port+0x3a>
	{
		case 'A':
		case 'a':
		val=PINA;
 4ea:	89 b3       	in	r24, 0x19	; 25
		break;
 4ec:	08 95       	ret
		case 'B':
		case 'b':
		val=PINB;
 4ee:	86 b3       	in	r24, 0x16	; 22
		break;
 4f0:	08 95       	ret
		case 'C':
		case 'c':
		val=PINC;
 4f2:	83 b3       	in	r24, 0x13	; 19
		break;
 4f4:	08 95       	ret
		case 'D':
		case 'd':
		val=PIND;
 4f6:	80 b3       	in	r24, 0x10	; 16
		break;
		default:
		break;
	}		
 4f8:	08 95       	ret

000004fa <send_falling_edge>:
	 #endif
 }

static void send_falling_edge(void)
{
	write_pin('a',EN,1);
 4fa:	81 e6       	ldi	r24, 0x61	; 97
 4fc:	60 e0       	ldi	r22, 0x00	; 0
 4fe:	41 e0       	ldi	r20, 0x01	; 1
 500:	0e 94 da 00 	call	0x1b4	; 0x1b4 <write_pin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 504:	8f e9       	ldi	r24, 0x9F	; 159
 506:	9f e0       	ldi	r25, 0x0F	; 15
 508:	01 97       	sbiw	r24, 0x01	; 1
 50a:	f1 f7       	brne	.-4      	; 0x508 <send_falling_edge+0xe>
 50c:	00 c0       	rjmp	.+0      	; 0x50e <send_falling_edge+0x14>
 50e:	00 00       	nop
	_delay_ms(2);
	write_pin('a',EN,0);
 510:	81 e6       	ldi	r24, 0x61	; 97
 512:	60 e0       	ldi	r22, 0x00	; 0
 514:	40 e0       	ldi	r20, 0x00	; 0
 516:	0e 94 da 00 	call	0x1b4	; 0x1b4 <write_pin>
 51a:	8f e9       	ldi	r24, 0x9F	; 159
 51c:	9f e0       	ldi	r25, 0x0F	; 15
 51e:	01 97       	sbiw	r24, 0x01	; 1
 520:	f1 f7       	brne	.-4      	; 0x51e <send_falling_edge+0x24>
 522:	00 c0       	rjmp	.+0      	; 0x524 <send_falling_edge+0x2a>
 524:	00 00       	nop
	_delay_ms(2);
}
 526:	08 95       	ret

00000528 <LCD_send_cmd>:

void LCD_send_cmd(char cmd)
{
 528:	cf 93       	push	r28
 52a:	c8 2f       	mov	r28, r24
	write_port('a',cmd);
	write_pin('a',RS,0);
	send_falling_edge();

	#elif defined four_bits_mode
	write_port('a',(PORTA & 0x0f)|(cmd&0xf0));
 52c:	6b b3       	in	r22, 0x1b	; 27
 52e:	80 7f       	andi	r24, 0xF0	; 240
 530:	6f 70       	andi	r22, 0x0F	; 15
 532:	68 2b       	or	r22, r24
 534:	81 e6       	ldi	r24, 0x61	; 97
 536:	0e 94 3f 02 	call	0x47e	; 0x47e <write_port>
	write_pin('a',RS,0);
 53a:	81 e6       	ldi	r24, 0x61	; 97
 53c:	61 e0       	ldi	r22, 0x01	; 1
 53e:	40 e0       	ldi	r20, 0x00	; 0
 540:	0e 94 da 00 	call	0x1b4	; 0x1b4 <write_pin>
	send_falling_edge();
 544:	0e 94 7d 02 	call	0x4fa	; 0x4fa <send_falling_edge>
	write_port('a',(PORTA & 0x0f)|(cmd<<4));
 548:	6b b3       	in	r22, 0x1b	; 27
 54a:	c2 95       	swap	r28
 54c:	c0 7f       	andi	r28, 0xF0	; 240
 54e:	6f 70       	andi	r22, 0x0F	; 15
 550:	6c 2b       	or	r22, r28
 552:	81 e6       	ldi	r24, 0x61	; 97
 554:	0e 94 3f 02 	call	0x47e	; 0x47e <write_port>
	write_pin('a',RS,0);
 558:	81 e6       	ldi	r24, 0x61	; 97
 55a:	61 e0       	ldi	r22, 0x01	; 1
 55c:	40 e0       	ldi	r20, 0x00	; 0
 55e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <write_pin>
	send_falling_edge();
 562:	0e 94 7d 02 	call	0x4fa	; 0x4fa <send_falling_edge>
 566:	8f ec       	ldi	r24, 0xCF	; 207
 568:	97 e0       	ldi	r25, 0x07	; 7
 56a:	01 97       	sbiw	r24, 0x01	; 1
 56c:	f1 f7       	brne	.-4      	; 0x56a <LCD_send_cmd+0x42>
 56e:	00 c0       	rjmp	.+0      	; 0x570 <LCD_send_cmd+0x48>
 570:	00 00       	nop
	_delay_ms(1);
	#endif
}
 572:	cf 91       	pop	r28
 574:	08 95       	ret

00000576 <LCD_Init>:
 576:	8f ef       	ldi	r24, 0xFF	; 255
 578:	91 ee       	ldi	r25, 0xE1	; 225
 57a:	a4 e0       	ldi	r26, 0x04	; 4
 57c:	81 50       	subi	r24, 0x01	; 1
 57e:	90 40       	sbci	r25, 0x00	; 0
 580:	a0 40       	sbci	r26, 0x00	; 0
 582:	e1 f7       	brne	.-8      	; 0x57c <LCD_Init+0x6>
 584:	00 c0       	rjmp	.+0      	; 0x586 <LCD_Init+0x10>
 586:	00 00       	nop
	_delay_ms(10);
	LCD_send_cmd(ENTRY_MODE); //entry mode
	_delay_ms(1);
	
	#elif defined four_bits_mode
	set_port('a',0xff);
 588:	81 e6       	ldi	r24, 0x61	; 97
 58a:	6f ef       	ldi	r22, 0xFF	; 255
 58c:	0e 94 20 02 	call	0x440	; 0x440 <set_port>
	write_pin('a',RW,0);
 590:	81 e6       	ldi	r24, 0x61	; 97
 592:	62 e0       	ldi	r22, 0x02	; 2
 594:	40 e0       	ldi	r20, 0x00	; 0
 596:	0e 94 da 00 	call	0x1b4	; 0x1b4 <write_pin>
	 LCD_send_cmd(RETURN_HOME); //return home
 59a:	82 e0       	ldi	r24, 0x02	; 2
 59c:	0e 94 94 02 	call	0x528	; 0x528 <LCD_send_cmd>
 5a0:	af e1       	ldi	r26, 0x1F	; 31
 5a2:	be e4       	ldi	r27, 0x4E	; 78
 5a4:	11 97       	sbiw	r26, 0x01	; 1
 5a6:	f1 f7       	brne	.-4      	; 0x5a4 <LCD_Init+0x2e>
 5a8:	00 c0       	rjmp	.+0      	; 0x5aa <LCD_Init+0x34>
 5aa:	00 00       	nop
	 _delay_ms(10);
	 //LCD_send_cmd(0x33);
	 //LCD_send_cmd(0x32);  
	 LCD_send_cmd(FOUR_BITS); //4bit mode
 5ac:	88 e2       	ldi	r24, 0x28	; 40
 5ae:	0e 94 94 02 	call	0x528	; 0x528 <LCD_send_cmd>
 5b2:	8f ec       	ldi	r24, 0xCF	; 207
 5b4:	97 e0       	ldi	r25, 0x07	; 7
 5b6:	01 97       	sbiw	r24, 0x01	; 1
 5b8:	f1 f7       	brne	.-4      	; 0x5b6 <LCD_Init+0x40>
 5ba:	00 c0       	rjmp	.+0      	; 0x5bc <LCD_Init+0x46>
 5bc:	00 00       	nop
	 _delay_ms(1);
	 LCD_send_cmd(CURSOR_ON_DISPLAN_ON);//display on cursor on
 5be:	8e e0       	ldi	r24, 0x0E	; 14
 5c0:	0e 94 94 02 	call	0x528	; 0x528 <LCD_send_cmd>
 5c4:	af ec       	ldi	r26, 0xCF	; 207
 5c6:	b7 e0       	ldi	r27, 0x07	; 7
 5c8:	11 97       	sbiw	r26, 0x01	; 1
 5ca:	f1 f7       	brne	.-4      	; 0x5c8 <LCD_Init+0x52>
 5cc:	00 c0       	rjmp	.+0      	; 0x5ce <LCD_Init+0x58>
 5ce:	00 00       	nop
	 _delay_ms(1);
	 LCD_send_cmd(CLR_SCREEN);//clear the screen
 5d0:	81 e0       	ldi	r24, 0x01	; 1
 5d2:	0e 94 94 02 	call	0x528	; 0x528 <LCD_send_cmd>
 5d6:	8f e1       	ldi	r24, 0x1F	; 31
 5d8:	9e e4       	ldi	r25, 0x4E	; 78
 5da:	01 97       	sbiw	r24, 0x01	; 1
 5dc:	f1 f7       	brne	.-4      	; 0x5da <LCD_Init+0x64>
 5de:	00 c0       	rjmp	.+0      	; 0x5e0 <LCD_Init+0x6a>
 5e0:	00 00       	nop
	 _delay_ms(10);
	 LCD_send_cmd(ENTRY_MODE); //entry mode
 5e2:	86 e0       	ldi	r24, 0x06	; 6
 5e4:	0e 94 94 02 	call	0x528	; 0x528 <LCD_send_cmd>
 5e8:	af ec       	ldi	r26, 0xCF	; 207
 5ea:	b7 e0       	ldi	r27, 0x07	; 7
 5ec:	11 97       	sbiw	r26, 0x01	; 1
 5ee:	f1 f7       	brne	.-4      	; 0x5ec <LCD_Init+0x76>
 5f0:	00 c0       	rjmp	.+0      	; 0x5f2 <LCD_Init+0x7c>
 5f2:	00 00       	nop
	 _delay_ms(1);
	 #endif
 }
 5f4:	08 95       	ret

000005f6 <LCD_send_char>:
	#endif
}


void LCD_send_char(char data)
{
 5f6:	cf 93       	push	r28
 5f8:	c8 2f       	mov	r28, r24
	write_port('a',data);
	write_pin('a',RS,1);
	send_falling_edge();

	#elif defined four_bits_mode
	write_port('a',(PORTA & 0x0f)|(data&0xf0));
 5fa:	6b b3       	in	r22, 0x1b	; 27
 5fc:	80 7f       	andi	r24, 0xF0	; 240
 5fe:	6f 70       	andi	r22, 0x0F	; 15
 600:	68 2b       	or	r22, r24
 602:	81 e6       	ldi	r24, 0x61	; 97
 604:	0e 94 3f 02 	call	0x47e	; 0x47e <write_port>
	write_pin('a',RS,1);
 608:	81 e6       	ldi	r24, 0x61	; 97
 60a:	61 e0       	ldi	r22, 0x01	; 1
 60c:	41 e0       	ldi	r20, 0x01	; 1
 60e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <write_pin>
	send_falling_edge();
 612:	0e 94 7d 02 	call	0x4fa	; 0x4fa <send_falling_edge>
	write_port('a',(PORTA & 0x0f)|(data<<4));
 616:	6b b3       	in	r22, 0x1b	; 27
 618:	c2 95       	swap	r28
 61a:	c0 7f       	andi	r28, 0xF0	; 240
 61c:	6f 70       	andi	r22, 0x0F	; 15
 61e:	6c 2b       	or	r22, r28
 620:	81 e6       	ldi	r24, 0x61	; 97
 622:	0e 94 3f 02 	call	0x47e	; 0x47e <write_port>
	write_pin('a',RS,1);
 626:	81 e6       	ldi	r24, 0x61	; 97
 628:	61 e0       	ldi	r22, 0x01	; 1
 62a:	41 e0       	ldi	r20, 0x01	; 1
 62c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <write_pin>
	send_falling_edge();
 630:	0e 94 7d 02 	call	0x4fa	; 0x4fa <send_falling_edge>
 634:	8f ec       	ldi	r24, 0xCF	; 207
 636:	97 e0       	ldi	r25, 0x07	; 7
 638:	01 97       	sbiw	r24, 0x01	; 1
 63a:	f1 f7       	brne	.-4      	; 0x638 <LCD_send_char+0x42>
 63c:	00 c0       	rjmp	.+0      	; 0x63e <LCD_send_char+0x48>
 63e:	00 00       	nop
	_delay_ms(1);
	#endif
}
 640:	cf 91       	pop	r28
 642:	08 95       	ret

00000644 <LCD_send_string>:

void LCD_send_string(char *data)
{
 644:	cf 93       	push	r28
 646:	df 93       	push	r29
 648:	ec 01       	movw	r28, r24
	while((*data)!='\0')
 64a:	88 81       	ld	r24, Y
 64c:	88 23       	and	r24, r24
 64e:	31 f0       	breq	.+12     	; 0x65c <LCD_send_string+0x18>
	send_falling_edge();
	_delay_ms(1);
	#endif
}

void LCD_send_string(char *data)
 650:	21 96       	adiw	r28, 0x01	; 1
{
	while((*data)!='\0')
	{
		LCD_send_char(*data);
 652:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <LCD_send_char>
	#endif
}

void LCD_send_string(char *data)
{
	while((*data)!='\0')
 656:	89 91       	ld	r24, Y+
 658:	88 23       	and	r24, r24
 65a:	d9 f7       	brne	.-10     	; 0x652 <LCD_send_string+0xe>
	{
		LCD_send_char(*data);
		data++;
	}
}
 65c:	df 91       	pop	r29
 65e:	cf 91       	pop	r28
 660:	08 95       	ret

00000662 <LCD_clearscreen>:
void LCD_clearscreen()
{
	LCD_send_cmd(CLR_SCREEN);
 662:	81 e0       	ldi	r24, 0x01	; 1
 664:	0e 94 94 02 	call	0x528	; 0x528 <LCD_send_cmd>
 668:	8f e1       	ldi	r24, 0x1F	; 31
 66a:	9e e4       	ldi	r25, 0x4E	; 78
 66c:	01 97       	sbiw	r24, 0x01	; 1
 66e:	f1 f7       	brne	.-4      	; 0x66c <LCD_clearscreen+0xa>
 670:	00 c0       	rjmp	.+0      	; 0x672 <LCD_clearscreen+0x10>
 672:	00 00       	nop
	_delay_ms(10);
}
 674:	08 95       	ret

00000676 <LCD_movecursor>:


void LCD_movecursor(char row,char coloumn)
{
	char data ;
	if(row>2||row<1||coloumn>16||coloumn<1)
 676:	28 2f       	mov	r18, r24
 678:	21 50       	subi	r18, 0x01	; 1
 67a:	22 30       	cpi	r18, 0x02	; 2
 67c:	70 f4       	brcc	.+28     	; 0x69a <LCD_movecursor+0x24>
 67e:	61 31       	cpi	r22, 0x11	; 17
 680:	70 f4       	brcc	.+28     	; 0x69e <LCD_movecursor+0x28>
 682:	66 23       	and	r22, r22
 684:	71 f0       	breq	.+28     	; 0x6a2 <LCD_movecursor+0x2c>
	{
		data=0x80;
	}
	else if(row==1)
 686:	81 30       	cpi	r24, 0x01	; 1
 688:	19 f4       	brne	.+6      	; 0x690 <LCD_movecursor+0x1a>
	{
		data=0x80+coloumn-1 ;
 68a:	96 2f       	mov	r25, r22
 68c:	91 58       	subi	r25, 0x81	; 129
 68e:	0a c0       	rjmp	.+20     	; 0x6a4 <LCD_movecursor+0x2e>
	}
	else if (row==2)
 690:	82 30       	cpi	r24, 0x02	; 2
 692:	41 f4       	brne	.+16     	; 0x6a4 <LCD_movecursor+0x2e>
	{
		data=0xc0+coloumn-1;
 694:	96 2f       	mov	r25, r22
 696:	91 54       	subi	r25, 0x41	; 65
 698:	05 c0       	rjmp	.+10     	; 0x6a4 <LCD_movecursor+0x2e>
void LCD_movecursor(char row,char coloumn)
{
	char data ;
	if(row>2||row<1||coloumn>16||coloumn<1)
	{
		data=0x80;
 69a:	90 e8       	ldi	r25, 0x80	; 128
 69c:	03 c0       	rjmp	.+6      	; 0x6a4 <LCD_movecursor+0x2e>
 69e:	90 e8       	ldi	r25, 0x80	; 128
 6a0:	01 c0       	rjmp	.+2      	; 0x6a4 <LCD_movecursor+0x2e>
 6a2:	90 e8       	ldi	r25, 0x80	; 128
	}
	else if (row==2)
	{
		data=0xc0+coloumn-1;
	}
	LCD_send_cmd(data);
 6a4:	89 2f       	mov	r24, r25
 6a6:	0e 94 94 02 	call	0x528	; 0x528 <LCD_send_cmd>
 6aa:	8f ec       	ldi	r24, 0xCF	; 207
 6ac:	97 e0       	ldi	r25, 0x07	; 7
 6ae:	01 97       	sbiw	r24, 0x01	; 1
 6b0:	f1 f7       	brne	.-4      	; 0x6ae <LCD_movecursor+0x38>
 6b2:	00 c0       	rjmp	.+0      	; 0x6b4 <LCD_movecursor+0x3e>
 6b4:	00 00       	nop
	_delay_ms(1);
}
 6b6:	08 95       	ret

000006b8 <main>:
#include "SPI.h"
#define F_CPU 8000000UL
#include <util/delay.h>

int main(void)
{
 6b8:	cf 93       	push	r28
 6ba:	df 93       	push	r29
	SPI_SlaveInit();
 6bc:	0e 94 8a 03 	call	0x714	; 0x714 <SPI_SlaveInit>
	LCD_Init();
 6c0:	0e 94 bb 02 	call	0x576	; 0x576 <LCD_Init>
 6c4:	da e0       	ldi	r29, 0x0A	; 10
	unsigned char x=0x30;
 6c6:	c0 e3       	ldi	r28, 0x30	; 48
	unsigned char z=0;
    while(z<10)
    {
       x=SPI_SlaveReceiveChar(x);
 6c8:	8c 2f       	mov	r24, r28
 6ca:	0e 94 9e 03 	call	0x73c	; 0x73c <SPI_SlaveReceiveChar>
 6ce:	c8 2f       	mov	r28, r24
	   LCD_send_char(x);
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <LCD_send_char>
 6d6:	d1 50       	subi	r29, 0x01	; 1
{
	SPI_SlaveInit();
	LCD_Init();
	unsigned char x=0x30;
	unsigned char z=0;
    while(z<10)
 6d8:	b9 f7       	brne	.-18     	; 0x6c8 <main+0x10>
    {
       x=SPI_SlaveReceiveChar(x);
	   LCD_send_char(x);
	   z++;
    }
 6da:	80 e0       	ldi	r24, 0x00	; 0
 6dc:	90 e0       	ldi	r25, 0x00	; 0
 6de:	df 91       	pop	r29
 6e0:	cf 91       	pop	r28
 6e2:	08 95       	ret

000006e4 <SPI_MasterInit>:
#define F_CPU 8000000UL
#include <util/delay.h>

void SPI_MasterInit()
{
	set_pin('b',4,1);
 6e4:	82 e6       	ldi	r24, 0x62	; 98
 6e6:	64 e0       	ldi	r22, 0x04	; 4
 6e8:	41 e0       	ldi	r20, 0x01	; 1
 6ea:	0e 94 49 00 	call	0x92	; 0x92 <set_pin>
	set_pin('b',5,1);
 6ee:	82 e6       	ldi	r24, 0x62	; 98
 6f0:	65 e0       	ldi	r22, 0x05	; 5
 6f2:	41 e0       	ldi	r20, 0x01	; 1
 6f4:	0e 94 49 00 	call	0x92	; 0x92 <set_pin>
	set_pin('b',7,1);
 6f8:	82 e6       	ldi	r24, 0x62	; 98
 6fa:	67 e0       	ldi	r22, 0x07	; 7
 6fc:	41 e0       	ldi	r20, 0x01	; 1
 6fe:	0e 94 49 00 	call	0x92	; 0x92 <set_pin>
	SET_BIT(SPCR,MSTR);
 702:	6c 9a       	sbi	0x0d, 4	; 13
	SET_BIT(SPCR,SPR0);
 704:	68 9a       	sbi	0x0d, 0	; 13
	SET_BIT(SPCR,SPE);
 706:	6e 9a       	sbi	0x0d, 6	; 13
	write_pin('B',4,1);
 708:	82 e4       	ldi	r24, 0x42	; 66
 70a:	64 e0       	ldi	r22, 0x04	; 4
 70c:	41 e0       	ldi	r20, 0x01	; 1
 70e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <write_pin>
}
 712:	08 95       	ret

00000714 <SPI_SlaveInit>:

void SPI_SlaveInit()
{
	SET_BIT(SPCR,SPE);
 714:	6e 9a       	sbi	0x0d, 6	; 13
	set_pin('b',6,1);
 716:	82 e6       	ldi	r24, 0x62	; 98
 718:	66 e0       	ldi	r22, 0x06	; 6
 71a:	41 e0       	ldi	r20, 0x01	; 1
 71c:	0e 94 49 00 	call	0x92	; 0x92 <set_pin>
}
 720:	08 95       	ret

00000722 <SPI_MasterTransChar>:

unsigned char SPI_MasterTransChar(unsigned char Data)
{
 722:	cf 93       	push	r28
 724:	c8 2f       	mov	r28, r24
	write_pin('b',4,0);
 726:	82 e6       	ldi	r24, 0x62	; 98
 728:	64 e0       	ldi	r22, 0x04	; 4
 72a:	40 e0       	ldi	r20, 0x00	; 0
 72c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <write_pin>
	SPDR=Data;
 730:	cf b9       	out	0x0f, r28	; 15
	while(READ_BIT(SPSR,SPIF)==0);
 732:	77 9b       	sbis	0x0e, 7	; 14
 734:	fe cf       	rjmp	.-4      	; 0x732 <SPI_MasterTransChar+0x10>
	return SPDR;
 736:	8f b1       	in	r24, 0x0f	; 15
}
 738:	cf 91       	pop	r28
 73a:	08 95       	ret

0000073c <SPI_SlaveReceiveChar>:

unsigned char SPI_SlaveReceiveChar(unsigned char Data)
{

	SPDR=Data;
 73c:	8f b9       	out	0x0f, r24	; 15
	while(READ_BIT(SPSR,SPIF)==0);
 73e:	77 9b       	sbis	0x0e, 7	; 14
 740:	fe cf       	rjmp	.-4      	; 0x73e <SPI_SlaveReceiveChar+0x2>
	return SPDR;
 742:	8f b1       	in	r24, 0x0f	; 15
}
 744:	08 95       	ret

00000746 <SPI_MasterTransString>:

void SPI_MasterTransString(unsigned char *ptr)
{
 746:	cf 93       	push	r28
 748:	df 93       	push	r29
 74a:	ec 01       	movw	r28, r24
	while((*ptr)!=0)
 74c:	88 81       	ld	r24, Y
 74e:	88 23       	and	r24, r24
 750:	79 f0       	breq	.+30     	; 0x770 <SPI_MasterTransString+0x2a>
	SPDR=Data;
	while(READ_BIT(SPSR,SPIF)==0);
	return SPDR;
}

void SPI_MasterTransString(unsigned char *ptr)
 752:	21 96       	adiw	r28, 0x01	; 1
{
	while((*ptr)!=0)
	{
		SPI_SlaveReceiveChar(*ptr);
 754:	0e 94 9e 03 	call	0x73c	; 0x73c <SPI_SlaveReceiveChar>
 758:	8f ef       	ldi	r24, 0xFF	; 255
 75a:	92 e5       	ldi	r25, 0x52	; 82
 75c:	a7 e0       	ldi	r26, 0x07	; 7
 75e:	81 50       	subi	r24, 0x01	; 1
 760:	90 40       	sbci	r25, 0x00	; 0
 762:	a0 40       	sbci	r26, 0x00	; 0
 764:	e1 f7       	brne	.-8      	; 0x75e <SPI_MasterTransString+0x18>
 766:	00 c0       	rjmp	.+0      	; 0x768 <SPI_MasterTransString+0x22>
 768:	00 00       	nop
	return SPDR;
}

void SPI_MasterTransString(unsigned char *ptr)
{
	while((*ptr)!=0)
 76a:	89 91       	ld	r24, Y+
 76c:	88 23       	and	r24, r24
 76e:	91 f7       	brne	.-28     	; 0x754 <SPI_MasterTransString+0xe>
	{
		SPI_SlaveReceiveChar(*ptr);
		_delay_ms(300);
		ptr++;
	}
 770:	df 91       	pop	r29
 772:	cf 91       	pop	r28
 774:	08 95       	ret

00000776 <_exit>:
 776:	f8 94       	cli

00000778 <__stop_program>:
 778:	ff cf       	rjmp	.-2      	; 0x778 <__stop_program>
