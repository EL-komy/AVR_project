
counter 0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000570  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000570  000005e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000005e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000e0  00000000  00000000  00000d38  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000770  00000000  00000000  00000e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000026e  00000000  00000000  00001588  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000443  00000000  00000000  000017f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000140  00000000  00000000  00001c3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000176  00000000  00000000  00001d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000044e  00000000  00000000  00001ef2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e7       	ldi	r30, 0x70	; 112
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 54 00 	call	0xa8	; 0xa8 <main>
  8a:	0c 94 b6 02 	jmp	0x56c	; 0x56c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <button_init>:

#include "DIO.h"

void button_init(char port_name,char pin_number)
{
	set_pin(port_name,pin_number,0);
  92:	40 e0       	ldi	r20, 0x00	; 0
  94:	0e 94 73 00 	call	0xe6	; 0xe6 <set_pin>
}
  98:	08 95       	ret

0000009a <button_read>:
char button_read (char port_name,char pin_number)
{
	char x;
	x=read_pin(port_name,pin_number);
  9a:	0e 94 95 01 	call	0x32a	; 0x32a <read_pin>
	return x;
}
  9e:	08 95       	ret

000000a0 <button_pullup>:

void button_pullup(char port_name,char pin_number)
{
	write_pin(port_name,pin_number,1);
  a0:	41 e0       	ldi	r20, 0x01	; 1
  a2:	0e 94 04 01 	call	0x208	; 0x208 <write_pin>
  a6:	08 95       	ret

000000a8 <main>:

#include <avr/io.h>

int main(void)
{
	button_init('b',0);
  a8:	82 e6       	ldi	r24, 0x62	; 98
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	60 e0       	ldi	r22, 0x00	; 0
  ae:	70 e0       	ldi	r23, 0x00	; 0
  b0:	0e 94 49 00 	call	0x92	; 0x92 <button_init>
	set_port('a',0xff);
  b4:	81 e6       	ldi	r24, 0x61	; 97
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	6f ef       	ldi	r22, 0xFF	; 255
  ba:	70 e0       	ldi	r23, 0x00	; 0
  bc:	0e 94 4a 02 	call	0x494	; 0x494 <set_port>
	button_pullup('b',0);
  c0:	82 e6       	ldi	r24, 0x62	; 98
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	60 e0       	ldi	r22, 0x00	; 0
  c6:	70 e0       	ldi	r23, 0x00	; 0
  c8:	0e 94 50 00 	call	0xa0	; 0xa0 <button_pullup>
	TCCR0=6;
  cc:	86 e0       	ldi	r24, 0x06	; 6
  ce:	83 bf       	out	0x33, r24	; 51
	TCNT0=0;
  d0:	12 be       	out	0x32, r1	; 50
		{
			write_port('a',TCNT0);
		} while (TIFR&(1<<TOV0)==0);
		
		
		TIFR=1;	
  d2:	c1 e0       	ldi	r28, 0x01	; 1
			write_port('a',TCNT0);
		}
		*/
		do 
		{
			write_port('a',TCNT0);
  d4:	62 b7       	in	r22, 0x32	; 50
  d6:	81 e6       	ldi	r24, 0x61	; 97
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	70 e0       	ldi	r23, 0x00	; 0
  dc:	0e 94 69 02 	call	0x4d2	; 0x4d2 <write_port>
		} while (TIFR&(1<<TOV0)==0);
  e0:	88 b7       	in	r24, 0x38	; 56
		
		
		TIFR=1;	
  e2:	c8 bf       	out	0x38, r28	; 56
  e4:	f7 cf       	rjmp	.-18     	; 0xd4 <main+0x2c>

000000e6 <set_pin>:
#include <avr/io.h>
#include "std_macros.h"

void set_pin(char port_name,char pin_number,char direction)
{
	switch(port_name)
  e6:	84 34       	cpi	r24, 0x44	; 68
  e8:	09 f4       	brne	.+2      	; 0xec <set_pin+0x6>
  ea:	71 c0       	rjmp	.+226    	; 0x1ce <set_pin+0xe8>
  ec:	85 34       	cpi	r24, 0x45	; 69
  ee:	48 f4       	brcc	.+18     	; 0x102 <set_pin+0x1c>
  f0:	82 34       	cpi	r24, 0x42	; 66
  f2:	99 f1       	breq	.+102    	; 0x15a <set_pin+0x74>
  f4:	83 34       	cpi	r24, 0x43	; 67
  f6:	08 f0       	brcs	.+2      	; 0xfa <set_pin+0x14>
  f8:	4d c0       	rjmp	.+154    	; 0x194 <set_pin+0xae>
  fa:	81 34       	cpi	r24, 0x41	; 65
  fc:	09 f0       	breq	.+2      	; 0x100 <set_pin+0x1a>
  fe:	83 c0       	rjmp	.+262    	; 0x206 <set_pin+0x120>
 100:	0f c0       	rjmp	.+30     	; 0x120 <set_pin+0x3a>
 102:	82 36       	cpi	r24, 0x62	; 98
 104:	51 f1       	breq	.+84     	; 0x15a <set_pin+0x74>
 106:	83 36       	cpi	r24, 0x63	; 99
 108:	20 f4       	brcc	.+8      	; 0x112 <set_pin+0x2c>
 10a:	81 36       	cpi	r24, 0x61	; 97
 10c:	09 f0       	breq	.+2      	; 0x110 <set_pin+0x2a>
 10e:	7b c0       	rjmp	.+246    	; 0x206 <set_pin+0x120>
 110:	07 c0       	rjmp	.+14     	; 0x120 <set_pin+0x3a>
 112:	83 36       	cpi	r24, 0x63	; 99
 114:	09 f4       	brne	.+2      	; 0x118 <set_pin+0x32>
 116:	3e c0       	rjmp	.+124    	; 0x194 <set_pin+0xae>
 118:	84 36       	cpi	r24, 0x64	; 100
 11a:	09 f0       	breq	.+2      	; 0x11e <set_pin+0x38>
 11c:	74 c0       	rjmp	.+232    	; 0x206 <set_pin+0x120>
 11e:	57 c0       	rjmp	.+174    	; 0x1ce <set_pin+0xe8>
	{
		case 'A':
		case 'a':
		if (direction==1)
 120:	41 30       	cpi	r20, 0x01	; 1
 122:	69 f4       	brne	.+26     	; 0x13e <set_pin+0x58>
		{
			SET_BIT(DDRA,pin_number);
 124:	2a b3       	in	r18, 0x1a	; 26
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	ac 01       	movw	r20, r24
 12c:	02 c0       	rjmp	.+4      	; 0x132 <set_pin+0x4c>
 12e:	44 0f       	add	r20, r20
 130:	55 1f       	adc	r21, r21
 132:	6a 95       	dec	r22
 134:	e2 f7       	brpl	.-8      	; 0x12e <set_pin+0x48>
 136:	ba 01       	movw	r22, r20
 138:	62 2b       	or	r22, r18
 13a:	6a bb       	out	0x1a, r22	; 26
 13c:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRA,pin_number);
 13e:	2a b3       	in	r18, 0x1a	; 26
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	ac 01       	movw	r20, r24
 146:	02 c0       	rjmp	.+4      	; 0x14c <set_pin+0x66>
 148:	44 0f       	add	r20, r20
 14a:	55 1f       	adc	r21, r21
 14c:	6a 95       	dec	r22
 14e:	e2 f7       	brpl	.-8      	; 0x148 <set_pin+0x62>
 150:	ba 01       	movw	r22, r20
 152:	60 95       	com	r22
 154:	62 23       	and	r22, r18
 156:	6a bb       	out	0x1a, r22	; 26
 158:	08 95       	ret
		}			
		break;
		
		case 'B':
		case 'b':
		if (direction==1)
 15a:	41 30       	cpi	r20, 0x01	; 1
 15c:	69 f4       	brne	.+26     	; 0x178 <set_pin+0x92>
		{
			SET_BIT(DDRB,pin_number);
 15e:	27 b3       	in	r18, 0x17	; 23
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	ac 01       	movw	r20, r24
 166:	02 c0       	rjmp	.+4      	; 0x16c <set_pin+0x86>
 168:	44 0f       	add	r20, r20
 16a:	55 1f       	adc	r21, r21
 16c:	6a 95       	dec	r22
 16e:	e2 f7       	brpl	.-8      	; 0x168 <set_pin+0x82>
 170:	ba 01       	movw	r22, r20
 172:	62 2b       	or	r22, r18
 174:	67 bb       	out	0x17, r22	; 23
 176:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRB,pin_number);
 178:	27 b3       	in	r18, 0x17	; 23
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	ac 01       	movw	r20, r24
 180:	02 c0       	rjmp	.+4      	; 0x186 <set_pin+0xa0>
 182:	44 0f       	add	r20, r20
 184:	55 1f       	adc	r21, r21
 186:	6a 95       	dec	r22
 188:	e2 f7       	brpl	.-8      	; 0x182 <set_pin+0x9c>
 18a:	ba 01       	movw	r22, r20
 18c:	60 95       	com	r22
 18e:	62 23       	and	r22, r18
 190:	67 bb       	out	0x17, r22	; 23
 192:	08 95       	ret
		}
		break;
		case 'C':
		case 'c':
		if (direction==1)
 194:	41 30       	cpi	r20, 0x01	; 1
 196:	69 f4       	brne	.+26     	; 0x1b2 <set_pin+0xcc>
		{
			SET_BIT(DDRC,pin_number);
 198:	24 b3       	in	r18, 0x14	; 20
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	ac 01       	movw	r20, r24
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <set_pin+0xc0>
 1a2:	44 0f       	add	r20, r20
 1a4:	55 1f       	adc	r21, r21
 1a6:	6a 95       	dec	r22
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <set_pin+0xbc>
 1aa:	ba 01       	movw	r22, r20
 1ac:	62 2b       	or	r22, r18
 1ae:	64 bb       	out	0x14, r22	; 20
 1b0:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRC,pin_number);
 1b2:	24 b3       	in	r18, 0x14	; 20
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	ac 01       	movw	r20, r24
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <set_pin+0xda>
 1bc:	44 0f       	add	r20, r20
 1be:	55 1f       	adc	r21, r21
 1c0:	6a 95       	dec	r22
 1c2:	e2 f7       	brpl	.-8      	; 0x1bc <set_pin+0xd6>
 1c4:	ba 01       	movw	r22, r20
 1c6:	60 95       	com	r22
 1c8:	62 23       	and	r22, r18
 1ca:	64 bb       	out	0x14, r22	; 20
 1cc:	08 95       	ret
		}
		break;
		
		case 'D':
		case 'd':
		if (direction==1)
 1ce:	41 30       	cpi	r20, 0x01	; 1
 1d0:	69 f4       	brne	.+26     	; 0x1ec <set_pin+0x106>
		{
			SET_BIT(DDRD,pin_number);
 1d2:	21 b3       	in	r18, 0x11	; 17
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	ac 01       	movw	r20, r24
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <set_pin+0xfa>
 1dc:	44 0f       	add	r20, r20
 1de:	55 1f       	adc	r21, r21
 1e0:	6a 95       	dec	r22
 1e2:	e2 f7       	brpl	.-8      	; 0x1dc <set_pin+0xf6>
 1e4:	ba 01       	movw	r22, r20
 1e6:	62 2b       	or	r22, r18
 1e8:	61 bb       	out	0x11, r22	; 17
 1ea:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRD,pin_number);
 1ec:	21 b3       	in	r18, 0x11	; 17
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	ac 01       	movw	r20, r24
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <set_pin+0x114>
 1f6:	44 0f       	add	r20, r20
 1f8:	55 1f       	adc	r21, r21
 1fa:	6a 95       	dec	r22
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <set_pin+0x110>
 1fe:	ba 01       	movw	r22, r20
 200:	60 95       	com	r22
 202:	62 23       	and	r22, r18
 204:	61 bb       	out	0x11, r22	; 17
 206:	08 95       	ret

00000208 <write_pin>:
	}
}

void write_pin(char port_name,char pin_number,char val)
{
	switch(port_name)
 208:	84 34       	cpi	r24, 0x44	; 68
 20a:	09 f4       	brne	.+2      	; 0x20e <write_pin+0x6>
 20c:	71 c0       	rjmp	.+226    	; 0x2f0 <write_pin+0xe8>
 20e:	85 34       	cpi	r24, 0x45	; 69
 210:	48 f4       	brcc	.+18     	; 0x224 <write_pin+0x1c>
 212:	82 34       	cpi	r24, 0x42	; 66
 214:	99 f1       	breq	.+102    	; 0x27c <write_pin+0x74>
 216:	83 34       	cpi	r24, 0x43	; 67
 218:	08 f0       	brcs	.+2      	; 0x21c <write_pin+0x14>
 21a:	4d c0       	rjmp	.+154    	; 0x2b6 <write_pin+0xae>
 21c:	81 34       	cpi	r24, 0x41	; 65
 21e:	09 f0       	breq	.+2      	; 0x222 <write_pin+0x1a>
 220:	83 c0       	rjmp	.+262    	; 0x328 <write_pin+0x120>
 222:	0f c0       	rjmp	.+30     	; 0x242 <write_pin+0x3a>
 224:	82 36       	cpi	r24, 0x62	; 98
 226:	51 f1       	breq	.+84     	; 0x27c <write_pin+0x74>
 228:	83 36       	cpi	r24, 0x63	; 99
 22a:	20 f4       	brcc	.+8      	; 0x234 <write_pin+0x2c>
 22c:	81 36       	cpi	r24, 0x61	; 97
 22e:	09 f0       	breq	.+2      	; 0x232 <write_pin+0x2a>
 230:	7b c0       	rjmp	.+246    	; 0x328 <write_pin+0x120>
 232:	07 c0       	rjmp	.+14     	; 0x242 <write_pin+0x3a>
 234:	83 36       	cpi	r24, 0x63	; 99
 236:	09 f4       	brne	.+2      	; 0x23a <write_pin+0x32>
 238:	3e c0       	rjmp	.+124    	; 0x2b6 <write_pin+0xae>
 23a:	84 36       	cpi	r24, 0x64	; 100
 23c:	09 f0       	breq	.+2      	; 0x240 <write_pin+0x38>
 23e:	74 c0       	rjmp	.+232    	; 0x328 <write_pin+0x120>
 240:	57 c0       	rjmp	.+174    	; 0x2f0 <write_pin+0xe8>
	{
		case 'A':
		case 'a':
		if (val==1)
 242:	41 30       	cpi	r20, 0x01	; 1
 244:	69 f4       	brne	.+26     	; 0x260 <write_pin+0x58>
		{
			SET_BIT(PORTA,pin_number);
 246:	2b b3       	in	r18, 0x1b	; 27
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	ac 01       	movw	r20, r24
 24e:	02 c0       	rjmp	.+4      	; 0x254 <write_pin+0x4c>
 250:	44 0f       	add	r20, r20
 252:	55 1f       	adc	r21, r21
 254:	6a 95       	dec	r22
 256:	e2 f7       	brpl	.-8      	; 0x250 <write_pin+0x48>
 258:	ba 01       	movw	r22, r20
 25a:	62 2b       	or	r22, r18
 25c:	6b bb       	out	0x1b, r22	; 27
 25e:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pin_number);
 260:	2b b3       	in	r18, 0x1b	; 27
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	ac 01       	movw	r20, r24
 268:	02 c0       	rjmp	.+4      	; 0x26e <write_pin+0x66>
 26a:	44 0f       	add	r20, r20
 26c:	55 1f       	adc	r21, r21
 26e:	6a 95       	dec	r22
 270:	e2 f7       	brpl	.-8      	; 0x26a <write_pin+0x62>
 272:	ba 01       	movw	r22, r20
 274:	60 95       	com	r22
 276:	62 23       	and	r22, r18
 278:	6b bb       	out	0x1b, r22	; 27
 27a:	08 95       	ret
		}
		break;
		
		case 'B':
		case 'b':
		if (val==1)
 27c:	41 30       	cpi	r20, 0x01	; 1
 27e:	69 f4       	brne	.+26     	; 0x29a <write_pin+0x92>
		{
			SET_BIT(PORTB,pin_number);
 280:	28 b3       	in	r18, 0x18	; 24
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	ac 01       	movw	r20, r24
 288:	02 c0       	rjmp	.+4      	; 0x28e <write_pin+0x86>
 28a:	44 0f       	add	r20, r20
 28c:	55 1f       	adc	r21, r21
 28e:	6a 95       	dec	r22
 290:	e2 f7       	brpl	.-8      	; 0x28a <write_pin+0x82>
 292:	ba 01       	movw	r22, r20
 294:	62 2b       	or	r22, r18
 296:	68 bb       	out	0x18, r22	; 24
 298:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pin_number);
 29a:	28 b3       	in	r18, 0x18	; 24
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	ac 01       	movw	r20, r24
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <write_pin+0xa0>
 2a4:	44 0f       	add	r20, r20
 2a6:	55 1f       	adc	r21, r21
 2a8:	6a 95       	dec	r22
 2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <write_pin+0x9c>
 2ac:	ba 01       	movw	r22, r20
 2ae:	60 95       	com	r22
 2b0:	62 23       	and	r22, r18
 2b2:	68 bb       	out	0x18, r22	; 24
 2b4:	08 95       	ret
		}
		break;
		
		case 'C':
		case 'c':
		if (val==1)
 2b6:	41 30       	cpi	r20, 0x01	; 1
 2b8:	69 f4       	brne	.+26     	; 0x2d4 <write_pin+0xcc>
		{
			SET_BIT(PORTC,pin_number);
 2ba:	25 b3       	in	r18, 0x15	; 21
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	ac 01       	movw	r20, r24
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <write_pin+0xc0>
 2c4:	44 0f       	add	r20, r20
 2c6:	55 1f       	adc	r21, r21
 2c8:	6a 95       	dec	r22
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <write_pin+0xbc>
 2cc:	ba 01       	movw	r22, r20
 2ce:	62 2b       	or	r22, r18
 2d0:	65 bb       	out	0x15, r22	; 21
 2d2:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pin_number);
 2d4:	25 b3       	in	r18, 0x15	; 21
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	ac 01       	movw	r20, r24
 2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <write_pin+0xda>
 2de:	44 0f       	add	r20, r20
 2e0:	55 1f       	adc	r21, r21
 2e2:	6a 95       	dec	r22
 2e4:	e2 f7       	brpl	.-8      	; 0x2de <write_pin+0xd6>
 2e6:	ba 01       	movw	r22, r20
 2e8:	60 95       	com	r22
 2ea:	62 23       	and	r22, r18
 2ec:	65 bb       	out	0x15, r22	; 21
 2ee:	08 95       	ret
		}
		break;
		
		case 'D':
		case 'd':
		if (val==1)
 2f0:	41 30       	cpi	r20, 0x01	; 1
 2f2:	69 f4       	brne	.+26     	; 0x30e <write_pin+0x106>
		{
			SET_BIT(PORTD,pin_number);
 2f4:	22 b3       	in	r18, 0x12	; 18
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	ac 01       	movw	r20, r24
 2fc:	02 c0       	rjmp	.+4      	; 0x302 <write_pin+0xfa>
 2fe:	44 0f       	add	r20, r20
 300:	55 1f       	adc	r21, r21
 302:	6a 95       	dec	r22
 304:	e2 f7       	brpl	.-8      	; 0x2fe <write_pin+0xf6>
 306:	ba 01       	movw	r22, r20
 308:	62 2b       	or	r22, r18
 30a:	62 bb       	out	0x12, r22	; 18
 30c:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pin_number);
 30e:	22 b3       	in	r18, 0x12	; 18
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	ac 01       	movw	r20, r24
 316:	02 c0       	rjmp	.+4      	; 0x31c <write_pin+0x114>
 318:	44 0f       	add	r20, r20
 31a:	55 1f       	adc	r21, r21
 31c:	6a 95       	dec	r22
 31e:	e2 f7       	brpl	.-8      	; 0x318 <write_pin+0x110>
 320:	ba 01       	movw	r22, r20
 322:	60 95       	com	r22
 324:	62 23       	and	r22, r18
 326:	62 bb       	out	0x12, r22	; 18
 328:	08 95       	ret

0000032a <read_pin>:
}

char read_pin(char port_name,char pin_number)
{
	char val;
	switch(port_name)
 32a:	84 34       	cpi	r24, 0x44	; 68
 32c:	09 f4       	brne	.+2      	; 0x330 <read_pin+0x6>
 32e:	51 c0       	rjmp	.+162    	; 0x3d2 <read_pin+0xa8>
 330:	85 34       	cpi	r24, 0x45	; 69
 332:	40 f4       	brcc	.+16     	; 0x344 <read_pin+0x1a>
 334:	82 34       	cpi	r24, 0x42	; 66
 336:	39 f1       	breq	.+78     	; 0x386 <read_pin+0x5c>
 338:	83 34       	cpi	r24, 0x43	; 67
 33a:	c0 f5       	brcc	.+112    	; 0x3ac <read_pin+0x82>
 33c:	81 34       	cpi	r24, 0x41	; 65
 33e:	09 f0       	breq	.+2      	; 0x342 <read_pin+0x18>
 340:	5a c0       	rjmp	.+180    	; 0x3f6 <read_pin+0xcc>
 342:	0e c0       	rjmp	.+28     	; 0x360 <read_pin+0x36>
 344:	82 36       	cpi	r24, 0x62	; 98
 346:	f9 f0       	breq	.+62     	; 0x386 <read_pin+0x5c>
 348:	83 36       	cpi	r24, 0x63	; 99
 34a:	20 f4       	brcc	.+8      	; 0x354 <read_pin+0x2a>
 34c:	81 36       	cpi	r24, 0x61	; 97
 34e:	09 f0       	breq	.+2      	; 0x352 <read_pin+0x28>
 350:	52 c0       	rjmp	.+164    	; 0x3f6 <read_pin+0xcc>
 352:	06 c0       	rjmp	.+12     	; 0x360 <read_pin+0x36>
 354:	83 36       	cpi	r24, 0x63	; 99
 356:	51 f1       	breq	.+84     	; 0x3ac <read_pin+0x82>
 358:	84 36       	cpi	r24, 0x64	; 100
 35a:	09 f0       	breq	.+2      	; 0x35e <read_pin+0x34>
 35c:	4c c0       	rjmp	.+152    	; 0x3f6 <read_pin+0xcc>
 35e:	39 c0       	rjmp	.+114    	; 0x3d2 <read_pin+0xa8>
	{
		case 'A':
		case 'a':
		val= READ_BIT(PINA,pin_number);
 360:	29 b3       	in	r18, 0x19	; 25
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	06 2e       	mov	r0, r22
 368:	02 c0       	rjmp	.+4      	; 0x36e <read_pin+0x44>
 36a:	88 0f       	add	r24, r24
 36c:	99 1f       	adc	r25, r25
 36e:	0a 94       	dec	r0
 370:	e2 f7       	brpl	.-8      	; 0x36a <read_pin+0x40>
 372:	30 e0       	ldi	r19, 0x00	; 0
 374:	82 23       	and	r24, r18
 376:	93 23       	and	r25, r19
 378:	02 c0       	rjmp	.+4      	; 0x37e <read_pin+0x54>
 37a:	95 95       	asr	r25
 37c:	87 95       	ror	r24
 37e:	6a 95       	dec	r22
 380:	e2 f7       	brpl	.-8      	; 0x37a <read_pin+0x50>
 382:	98 2f       	mov	r25, r24
		break;
 384:	38 c0       	rjmp	.+112    	; 0x3f6 <read_pin+0xcc>
		
		case 'B':
		case 'b':
		val=  READ_BIT(PINB,pin_number);
 386:	26 b3       	in	r18, 0x16	; 22
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	06 2e       	mov	r0, r22
 38e:	02 c0       	rjmp	.+4      	; 0x394 <read_pin+0x6a>
 390:	88 0f       	add	r24, r24
 392:	99 1f       	adc	r25, r25
 394:	0a 94       	dec	r0
 396:	e2 f7       	brpl	.-8      	; 0x390 <read_pin+0x66>
 398:	30 e0       	ldi	r19, 0x00	; 0
 39a:	82 23       	and	r24, r18
 39c:	93 23       	and	r25, r19
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <read_pin+0x7a>
 3a0:	95 95       	asr	r25
 3a2:	87 95       	ror	r24
 3a4:	6a 95       	dec	r22
 3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <read_pin+0x76>
 3a8:	98 2f       	mov	r25, r24
		break;
 3aa:	25 c0       	rjmp	.+74     	; 0x3f6 <read_pin+0xcc>
		
		case 'C':
		case 'c':
		val=  READ_BIT(PINC,pin_number);
 3ac:	23 b3       	in	r18, 0x13	; 19
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	06 2e       	mov	r0, r22
 3b4:	02 c0       	rjmp	.+4      	; 0x3ba <read_pin+0x90>
 3b6:	88 0f       	add	r24, r24
 3b8:	99 1f       	adc	r25, r25
 3ba:	0a 94       	dec	r0
 3bc:	e2 f7       	brpl	.-8      	; 0x3b6 <read_pin+0x8c>
 3be:	30 e0       	ldi	r19, 0x00	; 0
 3c0:	82 23       	and	r24, r18
 3c2:	93 23       	and	r25, r19
 3c4:	02 c0       	rjmp	.+4      	; 0x3ca <read_pin+0xa0>
 3c6:	95 95       	asr	r25
 3c8:	87 95       	ror	r24
 3ca:	6a 95       	dec	r22
 3cc:	e2 f7       	brpl	.-8      	; 0x3c6 <read_pin+0x9c>
 3ce:	98 2f       	mov	r25, r24
		break;
 3d0:	12 c0       	rjmp	.+36     	; 0x3f6 <read_pin+0xcc>
		
		case 'D':
		case 'd':
		val=  READ_BIT(PIND,pin_number);
 3d2:	20 b3       	in	r18, 0x10	; 16
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	06 2e       	mov	r0, r22
 3da:	02 c0       	rjmp	.+4      	; 0x3e0 <read_pin+0xb6>
 3dc:	88 0f       	add	r24, r24
 3de:	99 1f       	adc	r25, r25
 3e0:	0a 94       	dec	r0
 3e2:	e2 f7       	brpl	.-8      	; 0x3dc <read_pin+0xb2>
 3e4:	30 e0       	ldi	r19, 0x00	; 0
 3e6:	82 23       	and	r24, r18
 3e8:	93 23       	and	r25, r19
 3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <read_pin+0xc6>
 3ec:	95 95       	asr	r25
 3ee:	87 95       	ror	r24
 3f0:	6a 95       	dec	r22
 3f2:	e2 f7       	brpl	.-8      	; 0x3ec <read_pin+0xc2>
 3f4:	98 2f       	mov	r25, r24
		break;
		default:
		break;
	}
	 return val;
}			
 3f6:	89 2f       	mov	r24, r25
 3f8:	08 95       	ret

000003fa <toggle_pin>:

void toggle_pin(char port_name,char pin_number)
{
	switch(port_name)
 3fa:	84 34       	cpi	r24, 0x44	; 68
 3fc:	09 f4       	brne	.+2      	; 0x400 <toggle_pin+0x6>
 3fe:	3d c0       	rjmp	.+122    	; 0x47a <toggle_pin+0x80>
 400:	85 34       	cpi	r24, 0x45	; 69
 402:	40 f4       	brcc	.+16     	; 0x414 <toggle_pin+0x1a>
 404:	82 34       	cpi	r24, 0x42	; 66
 406:	f9 f0       	breq	.+62     	; 0x446 <toggle_pin+0x4c>
 408:	83 34       	cpi	r24, 0x43	; 67
 40a:	50 f5       	brcc	.+84     	; 0x460 <toggle_pin+0x66>
 40c:	81 34       	cpi	r24, 0x41	; 65
 40e:	09 f0       	breq	.+2      	; 0x412 <toggle_pin+0x18>
 410:	40 c0       	rjmp	.+128    	; 0x492 <toggle_pin+0x98>
 412:	0c c0       	rjmp	.+24     	; 0x42c <toggle_pin+0x32>
 414:	82 36       	cpi	r24, 0x62	; 98
 416:	b9 f0       	breq	.+46     	; 0x446 <toggle_pin+0x4c>
 418:	83 36       	cpi	r24, 0x63	; 99
 41a:	18 f4       	brcc	.+6      	; 0x422 <toggle_pin+0x28>
 41c:	81 36       	cpi	r24, 0x61	; 97
 41e:	c9 f5       	brne	.+114    	; 0x492 <toggle_pin+0x98>
 420:	05 c0       	rjmp	.+10     	; 0x42c <toggle_pin+0x32>
 422:	83 36       	cpi	r24, 0x63	; 99
 424:	e9 f0       	breq	.+58     	; 0x460 <toggle_pin+0x66>
 426:	84 36       	cpi	r24, 0x64	; 100
 428:	a1 f5       	brne	.+104    	; 0x492 <toggle_pin+0x98>
 42a:	27 c0       	rjmp	.+78     	; 0x47a <toggle_pin+0x80>
	{
		case 'A':
		case 'a':
		TOG_BIT(PORTA,pin_number);
 42c:	2b b3       	in	r18, 0x1b	; 27
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	ac 01       	movw	r20, r24
 434:	02 c0       	rjmp	.+4      	; 0x43a <toggle_pin+0x40>
 436:	44 0f       	add	r20, r20
 438:	55 1f       	adc	r21, r21
 43a:	6a 95       	dec	r22
 43c:	e2 f7       	brpl	.-8      	; 0x436 <toggle_pin+0x3c>
 43e:	ba 01       	movw	r22, r20
 440:	62 27       	eor	r22, r18
 442:	6b bb       	out	0x1b, r22	; 27
		break;
 444:	08 95       	ret
		
		case 'B':
		case 'b':
		TOG_BIT(PORTB,pin_number);
 446:	28 b3       	in	r18, 0x18	; 24
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	ac 01       	movw	r20, r24
 44e:	02 c0       	rjmp	.+4      	; 0x454 <toggle_pin+0x5a>
 450:	44 0f       	add	r20, r20
 452:	55 1f       	adc	r21, r21
 454:	6a 95       	dec	r22
 456:	e2 f7       	brpl	.-8      	; 0x450 <toggle_pin+0x56>
 458:	ba 01       	movw	r22, r20
 45a:	62 27       	eor	r22, r18
 45c:	68 bb       	out	0x18, r22	; 24
		break;
 45e:	08 95       	ret
		case 'C':
		case 'c':
		TOG_BIT(PORTC,pin_number);
 460:	25 b3       	in	r18, 0x15	; 21
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	ac 01       	movw	r20, r24
 468:	02 c0       	rjmp	.+4      	; 0x46e <toggle_pin+0x74>
 46a:	44 0f       	add	r20, r20
 46c:	55 1f       	adc	r21, r21
 46e:	6a 95       	dec	r22
 470:	e2 f7       	brpl	.-8      	; 0x46a <toggle_pin+0x70>
 472:	ba 01       	movw	r22, r20
 474:	62 27       	eor	r22, r18
 476:	65 bb       	out	0x15, r22	; 21
		break;
 478:	08 95       	ret
		case 'D':
		case 'd':
		TOG_BIT(PORTD,pin_number);
 47a:	22 b3       	in	r18, 0x12	; 18
 47c:	81 e0       	ldi	r24, 0x01	; 1
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	ac 01       	movw	r20, r24
 482:	02 c0       	rjmp	.+4      	; 0x488 <toggle_pin+0x8e>
 484:	44 0f       	add	r20, r20
 486:	55 1f       	adc	r21, r21
 488:	6a 95       	dec	r22
 48a:	e2 f7       	brpl	.-8      	; 0x484 <toggle_pin+0x8a>
 48c:	ba 01       	movw	r22, r20
 48e:	62 27       	eor	r22, r18
 490:	62 bb       	out	0x12, r22	; 18
 492:	08 95       	ret

00000494 <set_port>:
	}		
}

void set_port (char port_name,char direction)
{
	switch(port_name)
 494:	84 34       	cpi	r24, 0x44	; 68
 496:	d9 f0       	breq	.+54     	; 0x4ce <set_port+0x3a>
 498:	85 34       	cpi	r24, 0x45	; 69
 49a:	38 f4       	brcc	.+14     	; 0x4aa <set_port+0x16>
 49c:	82 34       	cpi	r24, 0x42	; 66
 49e:	99 f0       	breq	.+38     	; 0x4c6 <set_port+0x32>
 4a0:	83 34       	cpi	r24, 0x43	; 67
 4a2:	98 f4       	brcc	.+38     	; 0x4ca <set_port+0x36>
 4a4:	81 34       	cpi	r24, 0x41	; 65
 4a6:	a1 f4       	brne	.+40     	; 0x4d0 <set_port+0x3c>
 4a8:	0c c0       	rjmp	.+24     	; 0x4c2 <set_port+0x2e>
 4aa:	82 36       	cpi	r24, 0x62	; 98
 4ac:	61 f0       	breq	.+24     	; 0x4c6 <set_port+0x32>
 4ae:	83 36       	cpi	r24, 0x63	; 99
 4b0:	18 f4       	brcc	.+6      	; 0x4b8 <set_port+0x24>
 4b2:	81 36       	cpi	r24, 0x61	; 97
 4b4:	69 f4       	brne	.+26     	; 0x4d0 <set_port+0x3c>
 4b6:	05 c0       	rjmp	.+10     	; 0x4c2 <set_port+0x2e>
 4b8:	83 36       	cpi	r24, 0x63	; 99
 4ba:	39 f0       	breq	.+14     	; 0x4ca <set_port+0x36>
 4bc:	84 36       	cpi	r24, 0x64	; 100
 4be:	41 f4       	brne	.+16     	; 0x4d0 <set_port+0x3c>
 4c0:	06 c0       	rjmp	.+12     	; 0x4ce <set_port+0x3a>
	{
		case 'A':
		case 'a':
		DDRA=direction;
 4c2:	6a bb       	out	0x1a, r22	; 26
		break;
 4c4:	08 95       	ret
		case 'B':
		case 'b':
		DDRB=direction;
 4c6:	67 bb       	out	0x17, r22	; 23
		break;
 4c8:	08 95       	ret
		case 'C':
		case 'c':
		DDRC=direction;
 4ca:	64 bb       	out	0x14, r22	; 20
		break;
 4cc:	08 95       	ret
		case 'D':
		case 'd':
		DDRD=direction;
 4ce:	61 bb       	out	0x11, r22	; 17
 4d0:	08 95       	ret

000004d2 <write_port>:
		break;
	}			
}
void write_port (char port_name,char val)
{
	switch(port_name)
 4d2:	84 34       	cpi	r24, 0x44	; 68
 4d4:	d9 f0       	breq	.+54     	; 0x50c <write_port+0x3a>
 4d6:	85 34       	cpi	r24, 0x45	; 69
 4d8:	38 f4       	brcc	.+14     	; 0x4e8 <write_port+0x16>
 4da:	82 34       	cpi	r24, 0x42	; 66
 4dc:	99 f0       	breq	.+38     	; 0x504 <write_port+0x32>
 4de:	83 34       	cpi	r24, 0x43	; 67
 4e0:	98 f4       	brcc	.+38     	; 0x508 <write_port+0x36>
 4e2:	81 34       	cpi	r24, 0x41	; 65
 4e4:	a1 f4       	brne	.+40     	; 0x50e <write_port+0x3c>
 4e6:	0c c0       	rjmp	.+24     	; 0x500 <write_port+0x2e>
 4e8:	82 36       	cpi	r24, 0x62	; 98
 4ea:	61 f0       	breq	.+24     	; 0x504 <write_port+0x32>
 4ec:	83 36       	cpi	r24, 0x63	; 99
 4ee:	18 f4       	brcc	.+6      	; 0x4f6 <write_port+0x24>
 4f0:	81 36       	cpi	r24, 0x61	; 97
 4f2:	69 f4       	brne	.+26     	; 0x50e <write_port+0x3c>
 4f4:	05 c0       	rjmp	.+10     	; 0x500 <write_port+0x2e>
 4f6:	83 36       	cpi	r24, 0x63	; 99
 4f8:	39 f0       	breq	.+14     	; 0x508 <write_port+0x36>
 4fa:	84 36       	cpi	r24, 0x64	; 100
 4fc:	41 f4       	brne	.+16     	; 0x50e <write_port+0x3c>
 4fe:	06 c0       	rjmp	.+12     	; 0x50c <write_port+0x3a>
	{
		case 'A':
		case 'a':
		PORTA=val;
 500:	6b bb       	out	0x1b, r22	; 27
		break;
 502:	08 95       	ret
		case 'B':
		case 'b':
		PORTB=val;
 504:	68 bb       	out	0x18, r22	; 24
		break;
 506:	08 95       	ret
		case 'C':
		case 'c':
		PORTC=val;
 508:	65 bb       	out	0x15, r22	; 21
		break;
 50a:	08 95       	ret
		case 'D':
		case 'd':
		PORTD=val;
 50c:	62 bb       	out	0x12, r22	; 18
 50e:	08 95       	ret

00000510 <read_port>:

char read_port(char port_name)
{
	unsigned char val;
	
	switch(port_name)
 510:	84 34       	cpi	r24, 0x44	; 68
 512:	d9 f0       	breq	.+54     	; 0x54a <read_port+0x3a>
 514:	85 34       	cpi	r24, 0x45	; 69
 516:	38 f4       	brcc	.+14     	; 0x526 <read_port+0x16>
 518:	82 34       	cpi	r24, 0x42	; 66
 51a:	99 f0       	breq	.+38     	; 0x542 <read_port+0x32>
 51c:	83 34       	cpi	r24, 0x43	; 67
 51e:	98 f4       	brcc	.+38     	; 0x546 <read_port+0x36>
 520:	81 34       	cpi	r24, 0x41	; 65
 522:	a1 f4       	brne	.+40     	; 0x54c <read_port+0x3c>
 524:	0c c0       	rjmp	.+24     	; 0x53e <read_port+0x2e>
 526:	82 36       	cpi	r24, 0x62	; 98
 528:	61 f0       	breq	.+24     	; 0x542 <read_port+0x32>
 52a:	83 36       	cpi	r24, 0x63	; 99
 52c:	18 f4       	brcc	.+6      	; 0x534 <read_port+0x24>
 52e:	81 36       	cpi	r24, 0x61	; 97
 530:	69 f4       	brne	.+26     	; 0x54c <read_port+0x3c>
 532:	05 c0       	rjmp	.+10     	; 0x53e <read_port+0x2e>
 534:	83 36       	cpi	r24, 0x63	; 99
 536:	39 f0       	breq	.+14     	; 0x546 <read_port+0x36>
 538:	84 36       	cpi	r24, 0x64	; 100
 53a:	41 f4       	brne	.+16     	; 0x54c <read_port+0x3c>
 53c:	06 c0       	rjmp	.+12     	; 0x54a <read_port+0x3a>
	{
		case 'A':
		case 'a':
		val=PINA;
 53e:	89 b3       	in	r24, 0x19	; 25
		break;
 540:	08 95       	ret
		case 'B':
		case 'b':
		val=PINB;
 542:	86 b3       	in	r24, 0x16	; 22
		break;
 544:	08 95       	ret
		case 'C':
		case 'c':
		val=PINC;
 546:	83 b3       	in	r24, 0x13	; 19
		break;
 548:	08 95       	ret
		case 'D':
		case 'd':
		val=PIND;
 54a:	80 b3       	in	r24, 0x10	; 16
		break;
		default:
		break;
	}		
 54c:	08 95       	ret

0000054e <led_init>:

#include "DIO.h"

void led_init (char port_name,char pin_number)
{
	set_pin(port_name, pin_number,1);
 54e:	41 e0       	ldi	r20, 0x01	; 1
 550:	0e 94 73 00 	call	0xe6	; 0xe6 <set_pin>
}
 554:	08 95       	ret

00000556 <led_on>:
void led_on (char port_name,char pin_number)
{
	write_pin( port_name, pin_number,1);
 556:	41 e0       	ldi	r20, 0x01	; 1
 558:	0e 94 04 01 	call	0x208	; 0x208 <write_pin>
}
 55c:	08 95       	ret

0000055e <led_off>:
void led_off (char port_name,char pin_number)
{
	write_pin( port_name, pin_number,0);
 55e:	40 e0       	ldi	r20, 0x00	; 0
 560:	0e 94 04 01 	call	0x208	; 0x208 <write_pin>
}
 564:	08 95       	ret

00000566 <led_tog>:
void led_tog (char port_name,char pin_number)
{
	toggle_pin( port_name, pin_number);
 566:	0e 94 fd 01 	call	0x3fa	; 0x3fa <toggle_pin>
 56a:	08 95       	ret

0000056c <_exit>:
 56c:	f8 94       	cli

0000056e <__stop_program>:
 56e:	ff cf       	rjmp	.-2      	; 0x56e <__stop_program>
