
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bcc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000080  00800060  00000bcc  00000c40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000cc0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  0000138c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00001418  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000010a0  00000000  00000000  00001558  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000590  00000000  00000000  000025f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000940  00000000  00000000  00002b88  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002b4  00000000  00000000  000034c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002d7  00000000  00000000  0000377c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b6e  00000000  00000000  00003a53  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000045c1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ec       	ldi	r30, 0xCC	; 204
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3e       	cpi	r26, 0xE0	; 224
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 ee       	ldi	r26, 0xE0	; 224
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 3e       	cpi	r26, 0xE0	; 224
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 95 02 	call	0x52a	; 0x52a <main>
  8a:	0c 94 e4 05 	jmp	0xbc8	; 0xbc8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <button_init>:

#include "DIO.h"

void button_init(char port_name,char pin_number)
{
	set_pin(port_name,pin_number,0);
  92:	40 e0       	ldi	r20, 0x00	; 0
  94:	0e 94 54 00 	call	0xa8	; 0xa8 <set_pin>
}
  98:	08 95       	ret

0000009a <button_read>:
char button_read (char port_name,char pin_number)
{
	char x;
	x=read_pin(port_name,pin_number);
  9a:	0e 94 76 01 	call	0x2ec	; 0x2ec <read_pin>
	return x;
}
  9e:	08 95       	ret

000000a0 <button_pullup>:

void button_pullup(char port_name,char pin_number)
{
	write_pin(port_name,pin_number,1);
  a0:	41 e0       	ldi	r20, 0x01	; 1
  a2:	0e 94 e5 00 	call	0x1ca	; 0x1ca <write_pin>
  a6:	08 95       	ret

000000a8 <set_pin>:
#include <avr/io.h>
#include "std_macros.h"

void set_pin(char port_name,char pin_number,char direction)
{
	switch(port_name)
  a8:	84 34       	cpi	r24, 0x44	; 68
  aa:	09 f4       	brne	.+2      	; 0xae <set_pin+0x6>
  ac:	71 c0       	rjmp	.+226    	; 0x190 <set_pin+0xe8>
  ae:	85 34       	cpi	r24, 0x45	; 69
  b0:	48 f4       	brcc	.+18     	; 0xc4 <set_pin+0x1c>
  b2:	82 34       	cpi	r24, 0x42	; 66
  b4:	99 f1       	breq	.+102    	; 0x11c <set_pin+0x74>
  b6:	83 34       	cpi	r24, 0x43	; 67
  b8:	08 f0       	brcs	.+2      	; 0xbc <set_pin+0x14>
  ba:	4d c0       	rjmp	.+154    	; 0x156 <set_pin+0xae>
  bc:	81 34       	cpi	r24, 0x41	; 65
  be:	09 f0       	breq	.+2      	; 0xc2 <set_pin+0x1a>
  c0:	83 c0       	rjmp	.+262    	; 0x1c8 <set_pin+0x120>
  c2:	0f c0       	rjmp	.+30     	; 0xe2 <set_pin+0x3a>
  c4:	82 36       	cpi	r24, 0x62	; 98
  c6:	51 f1       	breq	.+84     	; 0x11c <set_pin+0x74>
  c8:	83 36       	cpi	r24, 0x63	; 99
  ca:	20 f4       	brcc	.+8      	; 0xd4 <set_pin+0x2c>
  cc:	81 36       	cpi	r24, 0x61	; 97
  ce:	09 f0       	breq	.+2      	; 0xd2 <set_pin+0x2a>
  d0:	7b c0       	rjmp	.+246    	; 0x1c8 <set_pin+0x120>
  d2:	07 c0       	rjmp	.+14     	; 0xe2 <set_pin+0x3a>
  d4:	83 36       	cpi	r24, 0x63	; 99
  d6:	09 f4       	brne	.+2      	; 0xda <set_pin+0x32>
  d8:	3e c0       	rjmp	.+124    	; 0x156 <set_pin+0xae>
  da:	84 36       	cpi	r24, 0x64	; 100
  dc:	09 f0       	breq	.+2      	; 0xe0 <set_pin+0x38>
  de:	74 c0       	rjmp	.+232    	; 0x1c8 <set_pin+0x120>
  e0:	57 c0       	rjmp	.+174    	; 0x190 <set_pin+0xe8>
	{
		case 'A':
		case 'a':
		if (direction==1)
  e2:	41 30       	cpi	r20, 0x01	; 1
  e4:	69 f4       	brne	.+26     	; 0x100 <set_pin+0x58>
		{
			SET_BIT(DDRA,pin_number);
  e6:	2a b3       	in	r18, 0x1a	; 26
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	ac 01       	movw	r20, r24
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <set_pin+0x4c>
  f0:	44 0f       	add	r20, r20
  f2:	55 1f       	adc	r21, r21
  f4:	6a 95       	dec	r22
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <set_pin+0x48>
  f8:	ba 01       	movw	r22, r20
  fa:	62 2b       	or	r22, r18
  fc:	6a bb       	out	0x1a, r22	; 26
  fe:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRA,pin_number);
 100:	2a b3       	in	r18, 0x1a	; 26
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	ac 01       	movw	r20, r24
 108:	02 c0       	rjmp	.+4      	; 0x10e <set_pin+0x66>
 10a:	44 0f       	add	r20, r20
 10c:	55 1f       	adc	r21, r21
 10e:	6a 95       	dec	r22
 110:	e2 f7       	brpl	.-8      	; 0x10a <set_pin+0x62>
 112:	ba 01       	movw	r22, r20
 114:	60 95       	com	r22
 116:	62 23       	and	r22, r18
 118:	6a bb       	out	0x1a, r22	; 26
 11a:	08 95       	ret
		}			
		break;
		
		case 'B':
		case 'b':
		if (direction==1)
 11c:	41 30       	cpi	r20, 0x01	; 1
 11e:	69 f4       	brne	.+26     	; 0x13a <set_pin+0x92>
		{
			SET_BIT(DDRB,pin_number);
 120:	27 b3       	in	r18, 0x17	; 23
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	ac 01       	movw	r20, r24
 128:	02 c0       	rjmp	.+4      	; 0x12e <set_pin+0x86>
 12a:	44 0f       	add	r20, r20
 12c:	55 1f       	adc	r21, r21
 12e:	6a 95       	dec	r22
 130:	e2 f7       	brpl	.-8      	; 0x12a <set_pin+0x82>
 132:	ba 01       	movw	r22, r20
 134:	62 2b       	or	r22, r18
 136:	67 bb       	out	0x17, r22	; 23
 138:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRB,pin_number);
 13a:	27 b3       	in	r18, 0x17	; 23
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	ac 01       	movw	r20, r24
 142:	02 c0       	rjmp	.+4      	; 0x148 <set_pin+0xa0>
 144:	44 0f       	add	r20, r20
 146:	55 1f       	adc	r21, r21
 148:	6a 95       	dec	r22
 14a:	e2 f7       	brpl	.-8      	; 0x144 <set_pin+0x9c>
 14c:	ba 01       	movw	r22, r20
 14e:	60 95       	com	r22
 150:	62 23       	and	r22, r18
 152:	67 bb       	out	0x17, r22	; 23
 154:	08 95       	ret
		}
		break;
		case 'C':
		case 'c':
		if (direction==1)
 156:	41 30       	cpi	r20, 0x01	; 1
 158:	69 f4       	brne	.+26     	; 0x174 <set_pin+0xcc>
		{
			SET_BIT(DDRC,pin_number);
 15a:	24 b3       	in	r18, 0x14	; 20
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	ac 01       	movw	r20, r24
 162:	02 c0       	rjmp	.+4      	; 0x168 <set_pin+0xc0>
 164:	44 0f       	add	r20, r20
 166:	55 1f       	adc	r21, r21
 168:	6a 95       	dec	r22
 16a:	e2 f7       	brpl	.-8      	; 0x164 <set_pin+0xbc>
 16c:	ba 01       	movw	r22, r20
 16e:	62 2b       	or	r22, r18
 170:	64 bb       	out	0x14, r22	; 20
 172:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRC,pin_number);
 174:	24 b3       	in	r18, 0x14	; 20
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	ac 01       	movw	r20, r24
 17c:	02 c0       	rjmp	.+4      	; 0x182 <set_pin+0xda>
 17e:	44 0f       	add	r20, r20
 180:	55 1f       	adc	r21, r21
 182:	6a 95       	dec	r22
 184:	e2 f7       	brpl	.-8      	; 0x17e <set_pin+0xd6>
 186:	ba 01       	movw	r22, r20
 188:	60 95       	com	r22
 18a:	62 23       	and	r22, r18
 18c:	64 bb       	out	0x14, r22	; 20
 18e:	08 95       	ret
		}
		break;
		
		case 'D':
		case 'd':
		if (direction==1)
 190:	41 30       	cpi	r20, 0x01	; 1
 192:	69 f4       	brne	.+26     	; 0x1ae <set_pin+0x106>
		{
			SET_BIT(DDRD,pin_number);
 194:	21 b3       	in	r18, 0x11	; 17
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	ac 01       	movw	r20, r24
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <set_pin+0xfa>
 19e:	44 0f       	add	r20, r20
 1a0:	55 1f       	adc	r21, r21
 1a2:	6a 95       	dec	r22
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <set_pin+0xf6>
 1a6:	ba 01       	movw	r22, r20
 1a8:	62 2b       	or	r22, r18
 1aa:	61 bb       	out	0x11, r22	; 17
 1ac:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRD,pin_number);
 1ae:	21 b3       	in	r18, 0x11	; 17
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	ac 01       	movw	r20, r24
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <set_pin+0x114>
 1b8:	44 0f       	add	r20, r20
 1ba:	55 1f       	adc	r21, r21
 1bc:	6a 95       	dec	r22
 1be:	e2 f7       	brpl	.-8      	; 0x1b8 <set_pin+0x110>
 1c0:	ba 01       	movw	r22, r20
 1c2:	60 95       	com	r22
 1c4:	62 23       	and	r22, r18
 1c6:	61 bb       	out	0x11, r22	; 17
 1c8:	08 95       	ret

000001ca <write_pin>:
	}
}

void write_pin(char port_name,char pin_number,char val)
{
	switch(port_name)
 1ca:	84 34       	cpi	r24, 0x44	; 68
 1cc:	09 f4       	brne	.+2      	; 0x1d0 <write_pin+0x6>
 1ce:	71 c0       	rjmp	.+226    	; 0x2b2 <write_pin+0xe8>
 1d0:	85 34       	cpi	r24, 0x45	; 69
 1d2:	48 f4       	brcc	.+18     	; 0x1e6 <write_pin+0x1c>
 1d4:	82 34       	cpi	r24, 0x42	; 66
 1d6:	99 f1       	breq	.+102    	; 0x23e <write_pin+0x74>
 1d8:	83 34       	cpi	r24, 0x43	; 67
 1da:	08 f0       	brcs	.+2      	; 0x1de <write_pin+0x14>
 1dc:	4d c0       	rjmp	.+154    	; 0x278 <write_pin+0xae>
 1de:	81 34       	cpi	r24, 0x41	; 65
 1e0:	09 f0       	breq	.+2      	; 0x1e4 <write_pin+0x1a>
 1e2:	83 c0       	rjmp	.+262    	; 0x2ea <write_pin+0x120>
 1e4:	0f c0       	rjmp	.+30     	; 0x204 <write_pin+0x3a>
 1e6:	82 36       	cpi	r24, 0x62	; 98
 1e8:	51 f1       	breq	.+84     	; 0x23e <write_pin+0x74>
 1ea:	83 36       	cpi	r24, 0x63	; 99
 1ec:	20 f4       	brcc	.+8      	; 0x1f6 <write_pin+0x2c>
 1ee:	81 36       	cpi	r24, 0x61	; 97
 1f0:	09 f0       	breq	.+2      	; 0x1f4 <write_pin+0x2a>
 1f2:	7b c0       	rjmp	.+246    	; 0x2ea <write_pin+0x120>
 1f4:	07 c0       	rjmp	.+14     	; 0x204 <write_pin+0x3a>
 1f6:	83 36       	cpi	r24, 0x63	; 99
 1f8:	09 f4       	brne	.+2      	; 0x1fc <write_pin+0x32>
 1fa:	3e c0       	rjmp	.+124    	; 0x278 <write_pin+0xae>
 1fc:	84 36       	cpi	r24, 0x64	; 100
 1fe:	09 f0       	breq	.+2      	; 0x202 <write_pin+0x38>
 200:	74 c0       	rjmp	.+232    	; 0x2ea <write_pin+0x120>
 202:	57 c0       	rjmp	.+174    	; 0x2b2 <write_pin+0xe8>
	{
		case 'A':
		case 'a':
		if (val==1)
 204:	41 30       	cpi	r20, 0x01	; 1
 206:	69 f4       	brne	.+26     	; 0x222 <write_pin+0x58>
		{
			SET_BIT(PORTA,pin_number);
 208:	2b b3       	in	r18, 0x1b	; 27
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	ac 01       	movw	r20, r24
 210:	02 c0       	rjmp	.+4      	; 0x216 <write_pin+0x4c>
 212:	44 0f       	add	r20, r20
 214:	55 1f       	adc	r21, r21
 216:	6a 95       	dec	r22
 218:	e2 f7       	brpl	.-8      	; 0x212 <write_pin+0x48>
 21a:	ba 01       	movw	r22, r20
 21c:	62 2b       	or	r22, r18
 21e:	6b bb       	out	0x1b, r22	; 27
 220:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pin_number);
 222:	2b b3       	in	r18, 0x1b	; 27
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	ac 01       	movw	r20, r24
 22a:	02 c0       	rjmp	.+4      	; 0x230 <write_pin+0x66>
 22c:	44 0f       	add	r20, r20
 22e:	55 1f       	adc	r21, r21
 230:	6a 95       	dec	r22
 232:	e2 f7       	brpl	.-8      	; 0x22c <write_pin+0x62>
 234:	ba 01       	movw	r22, r20
 236:	60 95       	com	r22
 238:	62 23       	and	r22, r18
 23a:	6b bb       	out	0x1b, r22	; 27
 23c:	08 95       	ret
		}
		break;
		
		case 'B':
		case 'b':
		if (val==1)
 23e:	41 30       	cpi	r20, 0x01	; 1
 240:	69 f4       	brne	.+26     	; 0x25c <write_pin+0x92>
		{
			SET_BIT(PORTB,pin_number);
 242:	28 b3       	in	r18, 0x18	; 24
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	ac 01       	movw	r20, r24
 24a:	02 c0       	rjmp	.+4      	; 0x250 <write_pin+0x86>
 24c:	44 0f       	add	r20, r20
 24e:	55 1f       	adc	r21, r21
 250:	6a 95       	dec	r22
 252:	e2 f7       	brpl	.-8      	; 0x24c <write_pin+0x82>
 254:	ba 01       	movw	r22, r20
 256:	62 2b       	or	r22, r18
 258:	68 bb       	out	0x18, r22	; 24
 25a:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pin_number);
 25c:	28 b3       	in	r18, 0x18	; 24
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	ac 01       	movw	r20, r24
 264:	02 c0       	rjmp	.+4      	; 0x26a <write_pin+0xa0>
 266:	44 0f       	add	r20, r20
 268:	55 1f       	adc	r21, r21
 26a:	6a 95       	dec	r22
 26c:	e2 f7       	brpl	.-8      	; 0x266 <write_pin+0x9c>
 26e:	ba 01       	movw	r22, r20
 270:	60 95       	com	r22
 272:	62 23       	and	r22, r18
 274:	68 bb       	out	0x18, r22	; 24
 276:	08 95       	ret
		}
		break;
		
		case 'C':
		case 'c':
		if (val==1)
 278:	41 30       	cpi	r20, 0x01	; 1
 27a:	69 f4       	brne	.+26     	; 0x296 <write_pin+0xcc>
		{
			SET_BIT(PORTC,pin_number);
 27c:	25 b3       	in	r18, 0x15	; 21
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	ac 01       	movw	r20, r24
 284:	02 c0       	rjmp	.+4      	; 0x28a <write_pin+0xc0>
 286:	44 0f       	add	r20, r20
 288:	55 1f       	adc	r21, r21
 28a:	6a 95       	dec	r22
 28c:	e2 f7       	brpl	.-8      	; 0x286 <write_pin+0xbc>
 28e:	ba 01       	movw	r22, r20
 290:	62 2b       	or	r22, r18
 292:	65 bb       	out	0x15, r22	; 21
 294:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pin_number);
 296:	25 b3       	in	r18, 0x15	; 21
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	ac 01       	movw	r20, r24
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <write_pin+0xda>
 2a0:	44 0f       	add	r20, r20
 2a2:	55 1f       	adc	r21, r21
 2a4:	6a 95       	dec	r22
 2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <write_pin+0xd6>
 2a8:	ba 01       	movw	r22, r20
 2aa:	60 95       	com	r22
 2ac:	62 23       	and	r22, r18
 2ae:	65 bb       	out	0x15, r22	; 21
 2b0:	08 95       	ret
		}
		break;
		
		case 'D':
		case 'd':
		if (val==1)
 2b2:	41 30       	cpi	r20, 0x01	; 1
 2b4:	69 f4       	brne	.+26     	; 0x2d0 <write_pin+0x106>
		{
			SET_BIT(PORTD,pin_number);
 2b6:	22 b3       	in	r18, 0x12	; 18
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	ac 01       	movw	r20, r24
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <write_pin+0xfa>
 2c0:	44 0f       	add	r20, r20
 2c2:	55 1f       	adc	r21, r21
 2c4:	6a 95       	dec	r22
 2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <write_pin+0xf6>
 2c8:	ba 01       	movw	r22, r20
 2ca:	62 2b       	or	r22, r18
 2cc:	62 bb       	out	0x12, r22	; 18
 2ce:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pin_number);
 2d0:	22 b3       	in	r18, 0x12	; 18
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	ac 01       	movw	r20, r24
 2d8:	02 c0       	rjmp	.+4      	; 0x2de <write_pin+0x114>
 2da:	44 0f       	add	r20, r20
 2dc:	55 1f       	adc	r21, r21
 2de:	6a 95       	dec	r22
 2e0:	e2 f7       	brpl	.-8      	; 0x2da <write_pin+0x110>
 2e2:	ba 01       	movw	r22, r20
 2e4:	60 95       	com	r22
 2e6:	62 23       	and	r22, r18
 2e8:	62 bb       	out	0x12, r22	; 18
 2ea:	08 95       	ret

000002ec <read_pin>:
}

char read_pin(char port_name,char pin_number)
{
	char val;
	switch(port_name)
 2ec:	84 34       	cpi	r24, 0x44	; 68
 2ee:	09 f4       	brne	.+2      	; 0x2f2 <read_pin+0x6>
 2f0:	51 c0       	rjmp	.+162    	; 0x394 <read_pin+0xa8>
 2f2:	85 34       	cpi	r24, 0x45	; 69
 2f4:	40 f4       	brcc	.+16     	; 0x306 <read_pin+0x1a>
 2f6:	82 34       	cpi	r24, 0x42	; 66
 2f8:	39 f1       	breq	.+78     	; 0x348 <read_pin+0x5c>
 2fa:	83 34       	cpi	r24, 0x43	; 67
 2fc:	c0 f5       	brcc	.+112    	; 0x36e <read_pin+0x82>
 2fe:	81 34       	cpi	r24, 0x41	; 65
 300:	09 f0       	breq	.+2      	; 0x304 <read_pin+0x18>
 302:	5a c0       	rjmp	.+180    	; 0x3b8 <read_pin+0xcc>
 304:	0e c0       	rjmp	.+28     	; 0x322 <read_pin+0x36>
 306:	82 36       	cpi	r24, 0x62	; 98
 308:	f9 f0       	breq	.+62     	; 0x348 <read_pin+0x5c>
 30a:	83 36       	cpi	r24, 0x63	; 99
 30c:	20 f4       	brcc	.+8      	; 0x316 <read_pin+0x2a>
 30e:	81 36       	cpi	r24, 0x61	; 97
 310:	09 f0       	breq	.+2      	; 0x314 <read_pin+0x28>
 312:	52 c0       	rjmp	.+164    	; 0x3b8 <read_pin+0xcc>
 314:	06 c0       	rjmp	.+12     	; 0x322 <read_pin+0x36>
 316:	83 36       	cpi	r24, 0x63	; 99
 318:	51 f1       	breq	.+84     	; 0x36e <read_pin+0x82>
 31a:	84 36       	cpi	r24, 0x64	; 100
 31c:	09 f0       	breq	.+2      	; 0x320 <read_pin+0x34>
 31e:	4c c0       	rjmp	.+152    	; 0x3b8 <read_pin+0xcc>
 320:	39 c0       	rjmp	.+114    	; 0x394 <read_pin+0xa8>
	{
		case 'A':
		case 'a':
		val= READ_BIT(PINA,pin_number);
 322:	29 b3       	in	r18, 0x19	; 25
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	06 2e       	mov	r0, r22
 32a:	02 c0       	rjmp	.+4      	; 0x330 <read_pin+0x44>
 32c:	88 0f       	add	r24, r24
 32e:	99 1f       	adc	r25, r25
 330:	0a 94       	dec	r0
 332:	e2 f7       	brpl	.-8      	; 0x32c <read_pin+0x40>
 334:	30 e0       	ldi	r19, 0x00	; 0
 336:	82 23       	and	r24, r18
 338:	93 23       	and	r25, r19
 33a:	02 c0       	rjmp	.+4      	; 0x340 <read_pin+0x54>
 33c:	95 95       	asr	r25
 33e:	87 95       	ror	r24
 340:	6a 95       	dec	r22
 342:	e2 f7       	brpl	.-8      	; 0x33c <read_pin+0x50>
 344:	98 2f       	mov	r25, r24
		break;
 346:	38 c0       	rjmp	.+112    	; 0x3b8 <read_pin+0xcc>
		
		case 'B':
		case 'b':
		val=  READ_BIT(PINB,pin_number);
 348:	26 b3       	in	r18, 0x16	; 22
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	06 2e       	mov	r0, r22
 350:	02 c0       	rjmp	.+4      	; 0x356 <read_pin+0x6a>
 352:	88 0f       	add	r24, r24
 354:	99 1f       	adc	r25, r25
 356:	0a 94       	dec	r0
 358:	e2 f7       	brpl	.-8      	; 0x352 <read_pin+0x66>
 35a:	30 e0       	ldi	r19, 0x00	; 0
 35c:	82 23       	and	r24, r18
 35e:	93 23       	and	r25, r19
 360:	02 c0       	rjmp	.+4      	; 0x366 <read_pin+0x7a>
 362:	95 95       	asr	r25
 364:	87 95       	ror	r24
 366:	6a 95       	dec	r22
 368:	e2 f7       	brpl	.-8      	; 0x362 <read_pin+0x76>
 36a:	98 2f       	mov	r25, r24
		break;
 36c:	25 c0       	rjmp	.+74     	; 0x3b8 <read_pin+0xcc>
		
		case 'C':
		case 'c':
		val=  READ_BIT(PINC,pin_number);
 36e:	23 b3       	in	r18, 0x13	; 19
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	06 2e       	mov	r0, r22
 376:	02 c0       	rjmp	.+4      	; 0x37c <read_pin+0x90>
 378:	88 0f       	add	r24, r24
 37a:	99 1f       	adc	r25, r25
 37c:	0a 94       	dec	r0
 37e:	e2 f7       	brpl	.-8      	; 0x378 <read_pin+0x8c>
 380:	30 e0       	ldi	r19, 0x00	; 0
 382:	82 23       	and	r24, r18
 384:	93 23       	and	r25, r19
 386:	02 c0       	rjmp	.+4      	; 0x38c <read_pin+0xa0>
 388:	95 95       	asr	r25
 38a:	87 95       	ror	r24
 38c:	6a 95       	dec	r22
 38e:	e2 f7       	brpl	.-8      	; 0x388 <read_pin+0x9c>
 390:	98 2f       	mov	r25, r24
		break;
 392:	12 c0       	rjmp	.+36     	; 0x3b8 <read_pin+0xcc>
		
		case 'D':
		case 'd':
		val=  READ_BIT(PIND,pin_number);
 394:	20 b3       	in	r18, 0x10	; 16
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	06 2e       	mov	r0, r22
 39c:	02 c0       	rjmp	.+4      	; 0x3a2 <read_pin+0xb6>
 39e:	88 0f       	add	r24, r24
 3a0:	99 1f       	adc	r25, r25
 3a2:	0a 94       	dec	r0
 3a4:	e2 f7       	brpl	.-8      	; 0x39e <read_pin+0xb2>
 3a6:	30 e0       	ldi	r19, 0x00	; 0
 3a8:	82 23       	and	r24, r18
 3aa:	93 23       	and	r25, r19
 3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <read_pin+0xc6>
 3ae:	95 95       	asr	r25
 3b0:	87 95       	ror	r24
 3b2:	6a 95       	dec	r22
 3b4:	e2 f7       	brpl	.-8      	; 0x3ae <read_pin+0xc2>
 3b6:	98 2f       	mov	r25, r24
		break;
		default:
		break;
	}
	 return val;
}			
 3b8:	89 2f       	mov	r24, r25
 3ba:	08 95       	ret

000003bc <toggle_pin>:

void toggle_pin(char port_name,char pin_number)
{
	switch(port_name)
 3bc:	84 34       	cpi	r24, 0x44	; 68
 3be:	09 f4       	brne	.+2      	; 0x3c2 <toggle_pin+0x6>
 3c0:	3d c0       	rjmp	.+122    	; 0x43c <toggle_pin+0x80>
 3c2:	85 34       	cpi	r24, 0x45	; 69
 3c4:	40 f4       	brcc	.+16     	; 0x3d6 <toggle_pin+0x1a>
 3c6:	82 34       	cpi	r24, 0x42	; 66
 3c8:	f9 f0       	breq	.+62     	; 0x408 <toggle_pin+0x4c>
 3ca:	83 34       	cpi	r24, 0x43	; 67
 3cc:	50 f5       	brcc	.+84     	; 0x422 <toggle_pin+0x66>
 3ce:	81 34       	cpi	r24, 0x41	; 65
 3d0:	09 f0       	breq	.+2      	; 0x3d4 <toggle_pin+0x18>
 3d2:	40 c0       	rjmp	.+128    	; 0x454 <toggle_pin+0x98>
 3d4:	0c c0       	rjmp	.+24     	; 0x3ee <toggle_pin+0x32>
 3d6:	82 36       	cpi	r24, 0x62	; 98
 3d8:	b9 f0       	breq	.+46     	; 0x408 <toggle_pin+0x4c>
 3da:	83 36       	cpi	r24, 0x63	; 99
 3dc:	18 f4       	brcc	.+6      	; 0x3e4 <toggle_pin+0x28>
 3de:	81 36       	cpi	r24, 0x61	; 97
 3e0:	c9 f5       	brne	.+114    	; 0x454 <toggle_pin+0x98>
 3e2:	05 c0       	rjmp	.+10     	; 0x3ee <toggle_pin+0x32>
 3e4:	83 36       	cpi	r24, 0x63	; 99
 3e6:	e9 f0       	breq	.+58     	; 0x422 <toggle_pin+0x66>
 3e8:	84 36       	cpi	r24, 0x64	; 100
 3ea:	a1 f5       	brne	.+104    	; 0x454 <toggle_pin+0x98>
 3ec:	27 c0       	rjmp	.+78     	; 0x43c <toggle_pin+0x80>
	{
		case 'A':
		case 'a':
		TOG_BIT(PORTA,pin_number);
 3ee:	2b b3       	in	r18, 0x1b	; 27
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	ac 01       	movw	r20, r24
 3f6:	02 c0       	rjmp	.+4      	; 0x3fc <toggle_pin+0x40>
 3f8:	44 0f       	add	r20, r20
 3fa:	55 1f       	adc	r21, r21
 3fc:	6a 95       	dec	r22
 3fe:	e2 f7       	brpl	.-8      	; 0x3f8 <toggle_pin+0x3c>
 400:	ba 01       	movw	r22, r20
 402:	62 27       	eor	r22, r18
 404:	6b bb       	out	0x1b, r22	; 27
		break;
 406:	08 95       	ret
		
		case 'B':
		case 'b':
		TOG_BIT(PORTB,pin_number);
 408:	28 b3       	in	r18, 0x18	; 24
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	ac 01       	movw	r20, r24
 410:	02 c0       	rjmp	.+4      	; 0x416 <toggle_pin+0x5a>
 412:	44 0f       	add	r20, r20
 414:	55 1f       	adc	r21, r21
 416:	6a 95       	dec	r22
 418:	e2 f7       	brpl	.-8      	; 0x412 <toggle_pin+0x56>
 41a:	ba 01       	movw	r22, r20
 41c:	62 27       	eor	r22, r18
 41e:	68 bb       	out	0x18, r22	; 24
		break;
 420:	08 95       	ret
		case 'C':
		case 'c':
		TOG_BIT(PORTC,pin_number);
 422:	25 b3       	in	r18, 0x15	; 21
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	ac 01       	movw	r20, r24
 42a:	02 c0       	rjmp	.+4      	; 0x430 <toggle_pin+0x74>
 42c:	44 0f       	add	r20, r20
 42e:	55 1f       	adc	r21, r21
 430:	6a 95       	dec	r22
 432:	e2 f7       	brpl	.-8      	; 0x42c <toggle_pin+0x70>
 434:	ba 01       	movw	r22, r20
 436:	62 27       	eor	r22, r18
 438:	65 bb       	out	0x15, r22	; 21
		break;
 43a:	08 95       	ret
		case 'D':
		case 'd':
		TOG_BIT(PORTD,pin_number);
 43c:	22 b3       	in	r18, 0x12	; 18
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	ac 01       	movw	r20, r24
 444:	02 c0       	rjmp	.+4      	; 0x44a <toggle_pin+0x8e>
 446:	44 0f       	add	r20, r20
 448:	55 1f       	adc	r21, r21
 44a:	6a 95       	dec	r22
 44c:	e2 f7       	brpl	.-8      	; 0x446 <toggle_pin+0x8a>
 44e:	ba 01       	movw	r22, r20
 450:	62 27       	eor	r22, r18
 452:	62 bb       	out	0x12, r22	; 18
 454:	08 95       	ret

00000456 <set_port>:
	}		
}

void set_port (char port_name,char direction)
{
	switch(port_name)
 456:	84 34       	cpi	r24, 0x44	; 68
 458:	d9 f0       	breq	.+54     	; 0x490 <set_port+0x3a>
 45a:	85 34       	cpi	r24, 0x45	; 69
 45c:	38 f4       	brcc	.+14     	; 0x46c <set_port+0x16>
 45e:	82 34       	cpi	r24, 0x42	; 66
 460:	99 f0       	breq	.+38     	; 0x488 <set_port+0x32>
 462:	83 34       	cpi	r24, 0x43	; 67
 464:	98 f4       	brcc	.+38     	; 0x48c <set_port+0x36>
 466:	81 34       	cpi	r24, 0x41	; 65
 468:	a1 f4       	brne	.+40     	; 0x492 <set_port+0x3c>
 46a:	0c c0       	rjmp	.+24     	; 0x484 <set_port+0x2e>
 46c:	82 36       	cpi	r24, 0x62	; 98
 46e:	61 f0       	breq	.+24     	; 0x488 <set_port+0x32>
 470:	83 36       	cpi	r24, 0x63	; 99
 472:	18 f4       	brcc	.+6      	; 0x47a <set_port+0x24>
 474:	81 36       	cpi	r24, 0x61	; 97
 476:	69 f4       	brne	.+26     	; 0x492 <set_port+0x3c>
 478:	05 c0       	rjmp	.+10     	; 0x484 <set_port+0x2e>
 47a:	83 36       	cpi	r24, 0x63	; 99
 47c:	39 f0       	breq	.+14     	; 0x48c <set_port+0x36>
 47e:	84 36       	cpi	r24, 0x64	; 100
 480:	41 f4       	brne	.+16     	; 0x492 <set_port+0x3c>
 482:	06 c0       	rjmp	.+12     	; 0x490 <set_port+0x3a>
	{
		case 'A':
		case 'a':
		DDRA=direction;
 484:	6a bb       	out	0x1a, r22	; 26
		break;
 486:	08 95       	ret
		case 'B':
		case 'b':
		DDRB=direction;
 488:	67 bb       	out	0x17, r22	; 23
		break;
 48a:	08 95       	ret
		case 'C':
		case 'c':
		DDRC=direction;
 48c:	64 bb       	out	0x14, r22	; 20
		break;
 48e:	08 95       	ret
		case 'D':
		case 'd':
		DDRD=direction;
 490:	61 bb       	out	0x11, r22	; 17
 492:	08 95       	ret

00000494 <write_port>:
		break;
	}			
}
void write_port (char port_name,char val)
{
	switch(port_name)
 494:	84 34       	cpi	r24, 0x44	; 68
 496:	d9 f0       	breq	.+54     	; 0x4ce <write_port+0x3a>
 498:	85 34       	cpi	r24, 0x45	; 69
 49a:	38 f4       	brcc	.+14     	; 0x4aa <write_port+0x16>
 49c:	82 34       	cpi	r24, 0x42	; 66
 49e:	99 f0       	breq	.+38     	; 0x4c6 <write_port+0x32>
 4a0:	83 34       	cpi	r24, 0x43	; 67
 4a2:	98 f4       	brcc	.+38     	; 0x4ca <write_port+0x36>
 4a4:	81 34       	cpi	r24, 0x41	; 65
 4a6:	a1 f4       	brne	.+40     	; 0x4d0 <write_port+0x3c>
 4a8:	0c c0       	rjmp	.+24     	; 0x4c2 <write_port+0x2e>
 4aa:	82 36       	cpi	r24, 0x62	; 98
 4ac:	61 f0       	breq	.+24     	; 0x4c6 <write_port+0x32>
 4ae:	83 36       	cpi	r24, 0x63	; 99
 4b0:	18 f4       	brcc	.+6      	; 0x4b8 <write_port+0x24>
 4b2:	81 36       	cpi	r24, 0x61	; 97
 4b4:	69 f4       	brne	.+26     	; 0x4d0 <write_port+0x3c>
 4b6:	05 c0       	rjmp	.+10     	; 0x4c2 <write_port+0x2e>
 4b8:	83 36       	cpi	r24, 0x63	; 99
 4ba:	39 f0       	breq	.+14     	; 0x4ca <write_port+0x36>
 4bc:	84 36       	cpi	r24, 0x64	; 100
 4be:	41 f4       	brne	.+16     	; 0x4d0 <write_port+0x3c>
 4c0:	06 c0       	rjmp	.+12     	; 0x4ce <write_port+0x3a>
	{
		case 'A':
		case 'a':
		PORTA=val;
 4c2:	6b bb       	out	0x1b, r22	; 27
		break;
 4c4:	08 95       	ret
		case 'B':
		case 'b':
		PORTB=val;
 4c6:	68 bb       	out	0x18, r22	; 24
		break;
 4c8:	08 95       	ret
		case 'C':
		case 'c':
		PORTC=val;
 4ca:	65 bb       	out	0x15, r22	; 21
		break;
 4cc:	08 95       	ret
		case 'D':
		case 'd':
		PORTD=val;
 4ce:	62 bb       	out	0x12, r22	; 18
 4d0:	08 95       	ret

000004d2 <read_port>:

char read_port(char port_name)
{
	unsigned char val;
	
	switch(port_name)
 4d2:	84 34       	cpi	r24, 0x44	; 68
 4d4:	d9 f0       	breq	.+54     	; 0x50c <read_port+0x3a>
 4d6:	85 34       	cpi	r24, 0x45	; 69
 4d8:	38 f4       	brcc	.+14     	; 0x4e8 <read_port+0x16>
 4da:	82 34       	cpi	r24, 0x42	; 66
 4dc:	99 f0       	breq	.+38     	; 0x504 <read_port+0x32>
 4de:	83 34       	cpi	r24, 0x43	; 67
 4e0:	98 f4       	brcc	.+38     	; 0x508 <read_port+0x36>
 4e2:	81 34       	cpi	r24, 0x41	; 65
 4e4:	a1 f4       	brne	.+40     	; 0x50e <read_port+0x3c>
 4e6:	0c c0       	rjmp	.+24     	; 0x500 <read_port+0x2e>
 4e8:	82 36       	cpi	r24, 0x62	; 98
 4ea:	61 f0       	breq	.+24     	; 0x504 <read_port+0x32>
 4ec:	83 36       	cpi	r24, 0x63	; 99
 4ee:	18 f4       	brcc	.+6      	; 0x4f6 <read_port+0x24>
 4f0:	81 36       	cpi	r24, 0x61	; 97
 4f2:	69 f4       	brne	.+26     	; 0x50e <read_port+0x3c>
 4f4:	05 c0       	rjmp	.+10     	; 0x500 <read_port+0x2e>
 4f6:	83 36       	cpi	r24, 0x63	; 99
 4f8:	39 f0       	breq	.+14     	; 0x508 <read_port+0x36>
 4fa:	84 36       	cpi	r24, 0x64	; 100
 4fc:	41 f4       	brne	.+16     	; 0x50e <read_port+0x3c>
 4fe:	06 c0       	rjmp	.+12     	; 0x50c <read_port+0x3a>
	{
		case 'A':
		case 'a':
		val=PINA;
 500:	89 b3       	in	r24, 0x19	; 25
		break;
 502:	08 95       	ret
		case 'B':
		case 'b':
		val=PINB;
 504:	86 b3       	in	r24, 0x16	; 22
		break;
 506:	08 95       	ret
		case 'C':
		case 'c':
		val=PINC;
 508:	83 b3       	in	r24, 0x13	; 19
		break;
 50a:	08 95       	ret
		case 'D':
		case 'd':
		val=PIND;
 50c:	80 b3       	in	r24, 0x10	; 16
		break;
		default:
		break;
	}		
 50e:	08 95       	ret

00000510 <EEPROM_write>:

#include <avr/io.h>
#include "std_macros.h"
void EEPROM_write(unsigned short address, unsigned char data )
{
	EEARL=(char)address;
 510:	8e bb       	out	0x1e, r24	; 30
	EEARH=(char)(address>>8);
 512:	9f bb       	out	0x1f, r25	; 31
	EEDR=data ;
 514:	6d bb       	out	0x1d, r22	; 29
	SET_BIT(EECR,EEMWE);
 516:	e2 9a       	sbi	0x1c, 2	; 28
	SET_BIT(EECR,EEWE);
 518:	e1 9a       	sbi	0x1c, 1	; 28
	while(READ_BIT(EECR,EEWE)==1);
 51a:	e1 99       	sbic	0x1c, 1	; 28
 51c:	fe cf       	rjmp	.-4      	; 0x51a <EEPROM_write+0xa>
}
 51e:	08 95       	ret

00000520 <EEPROM_read>:

unsigned char EEPROM_read(unsigned short address )
{
	EEARL=(char)address;
 520:	8e bb       	out	0x1e, r24	; 30
	EEARH=(char)(address>>8);
 522:	9f bb       	out	0x1f, r25	; 31
	SET_BIT(EECR,EERE);
 524:	e0 9a       	sbi	0x1c, 0	; 28
	return EEDR ;
 526:	8d b3       	in	r24, 0x1d	; 29
}
 528:	08 95       	ret

0000052a <main>:
#include "LCD.h"
#define F_CPU 8000000UL
#include <util/delay.h>
#include "EEPROM.h"
int main(void)
{
 52a:	4f 92       	push	r4
 52c:	5f 92       	push	r5
 52e:	6f 92       	push	r6
 530:	7f 92       	push	r7
 532:	8f 92       	push	r8
 534:	9f 92       	push	r9
 536:	af 92       	push	r10
 538:	bf 92       	push	r11
 53a:	cf 92       	push	r12
 53c:	df 92       	push	r13
 53e:	ef 92       	push	r14
 540:	ff 92       	push	r15
 542:	0f 93       	push	r16
 544:	1f 93       	push	r17
 546:	cf 93       	push	r28
 548:	df 93       	push	r29
 54a:	cd b7       	in	r28, 0x3d	; 61
 54c:	de b7       	in	r29, 0x3e	; 62
 54e:	28 97       	sbiw	r28, 0x08	; 8
 550:	0f b6       	in	r0, 0x3f	; 63
 552:	f8 94       	cli
 554:	de bf       	out	0x3e, r29	; 62
 556:	0f be       	out	0x3f, r0	; 63
 558:	cd bf       	out	0x3d, r28	; 61
	LCD_Init();
 55a:	0e 94 34 05 	call	0xa68	; 0xa68 <LCD_Init>
	keypad_Init();
 55e:	0e 94 62 04 	call	0x8c4	; 0x8c4 <keypad_Init>
	//EEPROM_write(0x1,0xff);  //  ?????? ?? ????? ??   
mk: if(EEPROM_read(0x1)==0xff)
	{
		LCD_send_string(" Enter new password");
 562:	0f 2e       	mov	r0, r31
 564:	f0 e6       	ldi	r31, 0x60	; 96
 566:	af 2e       	mov	r10, r31
 568:	f0 e0       	ldi	r31, 0x00	; 0
 56a:	bf 2e       	mov	r11, r31
 56c:	f0 2d       	mov	r31, r0
		LCD_movecursor(2,1);
 56e:	0f 2e       	mov	r0, r31
 570:	fa e0       	ldi	r31, 0x0A	; 10
 572:	cf 2e       	mov	r12, r31
 574:	dd 24       	eor	r13, r13
 576:	f0 2d       	mov	r31, r0
			_delay_ms(300);
			EEPROM_write(i,x);
			LCD_send_char('*');
			x=10;
		}
		LCD_send_string("  Done");
 578:	0f 2e       	mov	r0, r31
 57a:	f4 e7       	ldi	r31, 0x74	; 116
 57c:	8f 2e       	mov	r8, r31
 57e:	f0 e0       	ldi	r31, 0x00	; 0
 580:	9f 2e       	mov	r9, r31
 582:	f0 2d       	mov	r31, r0
		_delay_ms(1000);
		LCD_clearscreen();
		LCD_send_string("  again");
 584:	0f 2e       	mov	r0, r31
 586:	fb e7       	ldi	r31, 0x7B	; 123
 588:	6f 2e       	mov	r6, r31
 58a:	f0 e0       	ldi	r31, 0x00	; 0
 58c:	7f 2e       	mov	r7, r31
 58e:	f0 2d       	mov	r31, r0
#include "keypad.h"
#include "LCD.h"
#define F_CPU 8000000UL
#include <util/delay.h>
#include "EEPROM.h"
int main(void)
 590:	0f 2e       	mov	r0, r31
 592:	f9 e0       	ldi	r31, 0x09	; 9
 594:	ef 2e       	mov	r14, r31
 596:	ff 24       	eor	r15, r15
 598:	f0 2d       	mov	r31, r0
 59a:	ec 0e       	add	r14, r28
 59c:	fd 1e       	adc	r15, r29
			_delay_ms(1000);
			EEPROM_write(0x1,5);
		}
		else
		{
			LCD_send_string("  not ok");
 59e:	0f 2e       	mov	r0, r31
 5a0:	f8 e8       	ldi	r31, 0x88	; 136
 5a2:	4f 2e       	mov	r4, r31
 5a4:	f0 e0       	ldi	r31, 0x00	; 0
 5a6:	5f 2e       	mov	r5, r31
 5a8:	f0 2d       	mov	r31, r0
int main(void)
{
	LCD_Init();
	keypad_Init();
	//EEPROM_write(0x1,0xff);  //  ?????? ?? ????? ??   
mk: if(EEPROM_read(0x1)==0xff)
 5aa:	81 e0       	ldi	r24, 0x01	; 1
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	0e 94 90 02 	call	0x520	; 0x520 <EEPROM_read>
 5b2:	8f 3f       	cpi	r24, 0xFF	; 255
 5b4:	09 f0       	breq	.+2      	; 0x5b8 <main+0x8e>
 5b6:	fd c0       	rjmp	.+506    	; 0x7b2 <main+0x288>
	{
		LCD_send_string(" Enter new password");
 5b8:	c5 01       	movw	r24, r10
 5ba:	0e 94 9b 05 	call	0xb36	; 0xb36 <LCD_send_string>
		LCD_movecursor(2,1);
 5be:	82 e0       	ldi	r24, 0x02	; 2
 5c0:	61 e0       	ldi	r22, 0x01	; 1
 5c2:	0e 94 b4 05 	call	0xb68	; 0xb68 <LCD_movecursor>
 5c6:	86 01       	movw	r16, r12
		char i,x=10,r[4],n[4],f=0;
		for (i=10;i<14;i++)
		{
			while(x==10 || x==NOTPRESSED)
			{
			   x=keypad_check_press();
 5c8:	0e 94 9f 04 	call	0x93e	; 0x93e <keypad_check_press>
 5cc:	68 2f       	mov	r22, r24
		LCD_send_string(" Enter new password");
		LCD_movecursor(2,1);
		char i,x=10,r[4],n[4],f=0;
		for (i=10;i<14;i++)
		{
			while(x==10 || x==NOTPRESSED)
 5ce:	8a 30       	cpi	r24, 0x0A	; 10
 5d0:	d9 f3       	breq	.-10     	; 0x5c8 <main+0x9e>
 5d2:	8f 3f       	cpi	r24, 0xFF	; 255
 5d4:	c9 f3       	breq	.-14     	; 0x5c8 <main+0x9e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5d6:	2f ef       	ldi	r18, 0xFF	; 255
 5d8:	32 e5       	ldi	r19, 0x52	; 82
 5da:	47 e0       	ldi	r20, 0x07	; 7
 5dc:	21 50       	subi	r18, 0x01	; 1
 5de:	30 40       	sbci	r19, 0x00	; 0
 5e0:	40 40       	sbci	r20, 0x00	; 0
 5e2:	e1 f7       	brne	.-8      	; 0x5dc <main+0xb2>
 5e4:	00 c0       	rjmp	.+0      	; 0x5e6 <main+0xbc>
 5e6:	00 00       	nop
			{
			   x=keypad_check_press();
			}			   
			_delay_ms(300);
			EEPROM_write(i,x);
 5e8:	c8 01       	movw	r24, r16
 5ea:	0e 94 88 02 	call	0x510	; 0x510 <EEPROM_write>
			LCD_send_char('*');
 5ee:	8a e2       	ldi	r24, 0x2A	; 42
 5f0:	0e 94 74 05 	call	0xae8	; 0xae8 <LCD_send_char>
 5f4:	0f 5f       	subi	r16, 0xFF	; 255
 5f6:	1f 4f       	sbci	r17, 0xFF	; 255
mk: if(EEPROM_read(0x1)==0xff)
	{
		LCD_send_string(" Enter new password");
		LCD_movecursor(2,1);
		char i,x=10,r[4],n[4],f=0;
		for (i=10;i<14;i++)
 5f8:	0e 30       	cpi	r16, 0x0E	; 14
 5fa:	11 05       	cpc	r17, r1
 5fc:	29 f7       	brne	.-54     	; 0x5c8 <main+0x9e>
			_delay_ms(300);
			EEPROM_write(i,x);
			LCD_send_char('*');
			x=10;
		}
		LCD_send_string("  Done");
 5fe:	c4 01       	movw	r24, r8
 600:	0e 94 9b 05 	call	0xb36	; 0xb36 <LCD_send_string>
 604:	8f ef       	ldi	r24, 0xFF	; 255
 606:	99 e6       	ldi	r25, 0x69	; 105
 608:	a8 e1       	ldi	r26, 0x18	; 24
 60a:	81 50       	subi	r24, 0x01	; 1
 60c:	90 40       	sbci	r25, 0x00	; 0
 60e:	a0 40       	sbci	r26, 0x00	; 0
 610:	e1 f7       	brne	.-8      	; 0x60a <main+0xe0>
 612:	00 c0       	rjmp	.+0      	; 0x614 <main+0xea>
 614:	00 00       	nop
		_delay_ms(1000);
		LCD_clearscreen();
 616:	0e 94 aa 05 	call	0xb54	; 0xb54 <LCD_clearscreen>
		LCD_send_string("  again");
 61a:	c3 01       	movw	r24, r6
 61c:	0e 94 9b 05 	call	0xb36	; 0xb36 <LCD_send_string>
		LCD_movecursor(2,1);
 620:	82 e0       	ldi	r24, 0x02	; 2
 622:	61 e0       	ldi	r22, 0x01	; 1
 624:	0e 94 b4 05 	call	0xb68	; 0xb68 <LCD_movecursor>
 628:	8e 01       	movw	r16, r28
 62a:	0b 5f       	subi	r16, 0xFB	; 251
 62c:	1f 4f       	sbci	r17, 0xFF	; 255
		
		for (i=0;i<4;i++)
		{
			while(x==10 || x==NOTPRESSED)
			{
				x=keypad_check_press();
 62e:	0e 94 9f 04 	call	0x93e	; 0x93e <keypad_check_press>
		LCD_send_string("  again");
		LCD_movecursor(2,1);
		
		for (i=0;i<4;i++)
		{
			while(x==10 || x==NOTPRESSED)
 632:	8a 30       	cpi	r24, 0x0A	; 10
 634:	e1 f3       	breq	.-8      	; 0x62e <main+0x104>
 636:	8f 3f       	cpi	r24, 0xFF	; 255
 638:	d1 f3       	breq	.-12     	; 0x62e <main+0x104>
 63a:	2f ef       	ldi	r18, 0xFF	; 255
 63c:	32 e5       	ldi	r19, 0x52	; 82
 63e:	47 e0       	ldi	r20, 0x07	; 7
 640:	21 50       	subi	r18, 0x01	; 1
 642:	30 40       	sbci	r19, 0x00	; 0
 644:	40 40       	sbci	r20, 0x00	; 0
 646:	e1 f7       	brne	.-8      	; 0x640 <main+0x116>
 648:	00 c0       	rjmp	.+0      	; 0x64a <main+0x120>
 64a:	00 00       	nop
			{
				x=keypad_check_press();
			}
			_delay_ms(300);
			r[i]=x;
 64c:	d8 01       	movw	r26, r16
 64e:	8d 93       	st	X+, r24
 650:	8d 01       	movw	r16, r26
			LCD_send_char('*');
 652:	8a e2       	ldi	r24, 0x2A	; 42
 654:	0e 94 74 05 	call	0xae8	; 0xae8 <LCD_send_char>
		_delay_ms(1000);
		LCD_clearscreen();
		LCD_send_string("  again");
		LCD_movecursor(2,1);
		
		for (i=0;i<4;i++)
 658:	0e 15       	cp	r16, r14
 65a:	1f 05       	cpc	r17, r15
 65c:	41 f7       	brne	.-48     	; 0x62e <main+0x104>
			LCD_send_char('*');
			x=10;
		}
		
		
		if (r[0]==EEPROM_read(10) && r[1]==EEPROM_read(11)&& r[2]==EEPROM_read(12) && r[3]==EEPROM_read(13) )
 65e:	1d 81       	ldd	r17, Y+5	; 0x05
 660:	c6 01       	movw	r24, r12
 662:	0e 94 90 02 	call	0x520	; 0x520 <EEPROM_read>
 666:	18 17       	cp	r17, r24
 668:	c1 f5       	brne	.+112    	; 0x6da <main+0x1b0>
 66a:	1e 81       	ldd	r17, Y+6	; 0x06
 66c:	8b e0       	ldi	r24, 0x0B	; 11
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	0e 94 90 02 	call	0x520	; 0x520 <EEPROM_read>
 674:	18 17       	cp	r17, r24
 676:	89 f5       	brne	.+98     	; 0x6da <main+0x1b0>
 678:	1f 81       	ldd	r17, Y+7	; 0x07
 67a:	8c e0       	ldi	r24, 0x0C	; 12
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	0e 94 90 02 	call	0x520	; 0x520 <EEPROM_read>
 682:	18 17       	cp	r17, r24
 684:	51 f5       	brne	.+84     	; 0x6da <main+0x1b0>
 686:	18 85       	ldd	r17, Y+8	; 0x08
 688:	8d e0       	ldi	r24, 0x0D	; 13
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	0e 94 90 02 	call	0x520	; 0x520 <EEPROM_read>
 690:	18 17       	cp	r17, r24
 692:	19 f5       	brne	.+70     	; 0x6da <main+0x1b0>
		{
			LCD_send_string("  ok");
 694:	83 e8       	ldi	r24, 0x83	; 131
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	0e 94 9b 05 	call	0xb36	; 0xb36 <LCD_send_string>
 69c:	2f ef       	ldi	r18, 0xFF	; 255
 69e:	39 e6       	ldi	r19, 0x69	; 105
 6a0:	48 e1       	ldi	r20, 0x18	; 24
 6a2:	21 50       	subi	r18, 0x01	; 1
 6a4:	30 40       	sbci	r19, 0x00	; 0
 6a6:	40 40       	sbci	r20, 0x00	; 0
 6a8:	e1 f7       	brne	.-8      	; 0x6a2 <main+0x178>
 6aa:	00 c0       	rjmp	.+0      	; 0x6ac <main+0x182>
 6ac:	00 00       	nop
			_delay_ms(1000);
			EEPROM_write(0x1,5);
 6ae:	81 e0       	ldi	r24, 0x01	; 1
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	65 e0       	ldi	r22, 0x05	; 5
 6b4:	0e 94 88 02 	call	0x510	; 0x510 <EEPROM_write>
	//EEPROM_write(0x1,0xff);  //  ?????? ?? ????? ??   
mk: if(EEPROM_read(0x1)==0xff)
	{
		LCD_send_string(" Enter new password");
		LCD_movecursor(2,1);
		char i,x=10,r[4],n[4],f=0;
 6b8:	cc 24       	eor	r12, r12
		}
		
		while(f!=2)
		{
			LCD_clearscreen();
			LCD_send_string("  password");
 6ba:	0f 2e       	mov	r0, r31
 6bc:	f1 e9       	ldi	r31, 0x91	; 145
 6be:	af 2e       	mov	r10, r31
 6c0:	f0 e0       	ldi	r31, 0x00	; 0
 6c2:	bf 2e       	mov	r11, r31
 6c4:	f0 2d       	mov	r31, r0
			LCD_movecursor(2,1);
 6c6:	66 24       	eor	r6, r6
 6c8:	68 94       	set
 6ca:	62 f8       	bld	r6, 2
				LCD_send_string("  RIGHT");
				break;
			}
			else
			{
				LCD_send_string("  wrong try again");
 6cc:	0f 2e       	mov	r0, r31
 6ce:	f4 ea       	ldi	r31, 0xA4	; 164
 6d0:	8f 2e       	mov	r8, r31
 6d2:	f0 e0       	ldi	r31, 0x00	; 0
 6d4:	9f 2e       	mov	r9, r31
 6d6:	f0 2d       	mov	r31, r0
 6d8:	0f c0       	rjmp	.+30     	; 0x6f8 <main+0x1ce>
			_delay_ms(1000);
			EEPROM_write(0x1,5);
		}
		else
		{
			LCD_send_string("  not ok");
 6da:	c2 01       	movw	r24, r4
 6dc:	0e 94 9b 05 	call	0xb36	; 0xb36 <LCD_send_string>
 6e0:	8f ef       	ldi	r24, 0xFF	; 255
 6e2:	99 e6       	ldi	r25, 0x69	; 105
 6e4:	a8 e1       	ldi	r26, 0x18	; 24
 6e6:	81 50       	subi	r24, 0x01	; 1
 6e8:	90 40       	sbci	r25, 0x00	; 0
 6ea:	a0 40       	sbci	r26, 0x00	; 0
 6ec:	e1 f7       	brne	.-8      	; 0x6e6 <main+0x1bc>
 6ee:	00 c0       	rjmp	.+0      	; 0x6f0 <main+0x1c6>
 6f0:	00 00       	nop
			_delay_ms(1000);
			LCD_clearscreen();
 6f2:	0e 94 aa 05 	call	0xb54	; 0xb54 <LCD_clearscreen>
			goto mk;
 6f6:	59 cf       	rjmp	.-334    	; 0x5aa <main+0x80>
		}
		
		while(f!=2)
		{
			LCD_clearscreen();
 6f8:	0e 94 aa 05 	call	0xb54	; 0xb54 <LCD_clearscreen>
			LCD_send_string("  password");
 6fc:	c5 01       	movw	r24, r10
 6fe:	0e 94 9b 05 	call	0xb36	; 0xb36 <LCD_send_string>
			LCD_movecursor(2,1);
 702:	82 e0       	ldi	r24, 0x02	; 2
 704:	61 e0       	ldi	r22, 0x01	; 1
 706:	0e 94 b4 05 	call	0xb68	; 0xb68 <LCD_movecursor>
 70a:	8e 01       	movw	r16, r28
 70c:	0f 5f       	subi	r16, 0xFF	; 255
 70e:	1f 4f       	sbci	r17, 0xFF	; 255
 710:	e6 2c       	mov	r14, r6
			
			for (i=0;i<4;i++)
			{
				while(x==10 || x==NOTPRESSED)
				{
					x=keypad_check_press();
 712:	0e 94 9f 04 	call	0x93e	; 0x93e <keypad_check_press>
			LCD_send_string("  password");
			LCD_movecursor(2,1);
			
			for (i=0;i<4;i++)
			{
				while(x==10 || x==NOTPRESSED)
 716:	8a 30       	cpi	r24, 0x0A	; 10
 718:	e1 f3       	breq	.-8      	; 0x712 <main+0x1e8>
 71a:	8f 3f       	cpi	r24, 0xFF	; 255
 71c:	d1 f3       	breq	.-12     	; 0x712 <main+0x1e8>
 71e:	2f ef       	ldi	r18, 0xFF	; 255
 720:	32 e5       	ldi	r19, 0x52	; 82
 722:	47 e0       	ldi	r20, 0x07	; 7
 724:	21 50       	subi	r18, 0x01	; 1
 726:	30 40       	sbci	r19, 0x00	; 0
 728:	40 40       	sbci	r20, 0x00	; 0
 72a:	e1 f7       	brne	.-8      	; 0x724 <main+0x1fa>
 72c:	00 c0       	rjmp	.+0      	; 0x72e <main+0x204>
 72e:	00 00       	nop
				{
					x=keypad_check_press();
				}
				_delay_ms(300);
				n[i]=x;
 730:	d8 01       	movw	r26, r16
 732:	8d 93       	st	X+, r24
 734:	8d 01       	movw	r16, r26
				LCD_send_char('*');
 736:	8a e2       	ldi	r24, 0x2A	; 42
 738:	0e 94 74 05 	call	0xae8	; 0xae8 <LCD_send_char>
 73c:	ea 94       	dec	r14
		{
			LCD_clearscreen();
			LCD_send_string("  password");
			LCD_movecursor(2,1);
			
			for (i=0;i<4;i++)
 73e:	49 f7       	brne	.-46     	; 0x712 <main+0x1e8>
				LCD_send_char('*');
				x=10;
			}
			
			
			if (n[0]==EEPROM_read(10) && n[1]==EEPROM_read(11)&& n[2]==EEPROM_read(12) && n[3]==EEPROM_read(13) )
 740:	19 81       	ldd	r17, Y+1	; 0x01
 742:	8a e0       	ldi	r24, 0x0A	; 10
 744:	90 e0       	ldi	r25, 0x00	; 0
 746:	0e 94 90 02 	call	0x520	; 0x520 <EEPROM_read>
 74a:	18 17       	cp	r17, r24
 74c:	d1 f4       	brne	.+52     	; 0x782 <main+0x258>
 74e:	1a 81       	ldd	r17, Y+2	; 0x02
 750:	8b e0       	ldi	r24, 0x0B	; 11
 752:	90 e0       	ldi	r25, 0x00	; 0
 754:	0e 94 90 02 	call	0x520	; 0x520 <EEPROM_read>
 758:	18 17       	cp	r17, r24
 75a:	99 f4       	brne	.+38     	; 0x782 <main+0x258>
 75c:	1b 81       	ldd	r17, Y+3	; 0x03
 75e:	8c e0       	ldi	r24, 0x0C	; 12
 760:	90 e0       	ldi	r25, 0x00	; 0
 762:	0e 94 90 02 	call	0x520	; 0x520 <EEPROM_read>
 766:	18 17       	cp	r17, r24
 768:	61 f4       	brne	.+24     	; 0x782 <main+0x258>
 76a:	1c 81       	ldd	r17, Y+4	; 0x04
 76c:	8d e0       	ldi	r24, 0x0D	; 13
 76e:	90 e0       	ldi	r25, 0x00	; 0
 770:	0e 94 90 02 	call	0x520	; 0x520 <EEPROM_read>
 774:	18 17       	cp	r17, r24
 776:	29 f4       	brne	.+10     	; 0x782 <main+0x258>
			{
				LCD_send_string("  RIGHT");
 778:	8c e9       	ldi	r24, 0x9C	; 156
 77a:	90 e0       	ldi	r25, 0x00	; 0
 77c:	0e 94 9b 05 	call	0xb36	; 0xb36 <LCD_send_string>
				break;
 780:	88 c0       	rjmp	.+272    	; 0x892 <__stack+0x33>
			}
			else
			{
				LCD_send_string("  wrong try again");
 782:	c4 01       	movw	r24, r8
 784:	0e 94 9b 05 	call	0xb36	; 0xb36 <LCD_send_string>
 788:	2f ef       	ldi	r18, 0xFF	; 255
 78a:	39 e6       	ldi	r19, 0x69	; 105
 78c:	48 e1       	ldi	r20, 0x18	; 24
 78e:	21 50       	subi	r18, 0x01	; 1
 790:	30 40       	sbci	r19, 0x00	; 0
 792:	40 40       	sbci	r20, 0x00	; 0
 794:	e1 f7       	brne	.-8      	; 0x78e <main+0x264>
 796:	00 c0       	rjmp	.+0      	; 0x798 <main+0x26e>
 798:	00 00       	nop
				_delay_ms(1000);
				f++;
 79a:	c3 94       	inc	r12
			}
			if (f==2)
 79c:	32 e0       	ldi	r19, 0x02	; 2
 79e:	c3 16       	cp	r12, r19
 7a0:	09 f0       	breq	.+2      	; 0x7a4 <main+0x27a>
 7a2:	aa cf       	rjmp	.-172    	; 0x6f8 <main+0x1ce>
			{
				LCD_clearscreen();
 7a4:	0e 94 aa 05 	call	0xb54	; 0xb54 <LCD_clearscreen>
				LCD_send_string("  thief");
 7a8:	86 eb       	ldi	r24, 0xB6	; 182
 7aa:	90 e0       	ldi	r25, 0x00	; 0
 7ac:	0e 94 9b 05 	call	0xb36	; 0xb36 <LCD_send_string>
 7b0:	70 c0       	rjmp	.+224    	; 0x892 <__stack+0x33>
int main(void)
{
	LCD_Init();
	keypad_Init();
	//EEPROM_write(0x1,0xff);  //  ?????? ?? ????? ??   
mk: if(EEPROM_read(0x1)==0xff)
 7b2:	cc 24       	eor	r12, r12
 7b4:	68 94       	set
 7b6:	c1 f8       	bld	r12, 1
	{
		char i,x=10,r[4],n[4],f=0;
		while(f!=2)
		{
			LCD_clearscreen();
			LCD_send_string("  password");
 7b8:	0f 2e       	mov	r0, r31
 7ba:	f1 e9       	ldi	r31, 0x91	; 145
 7bc:	af 2e       	mov	r10, r31
 7be:	f0 e0       	ldi	r31, 0x00	; 0
 7c0:	bf 2e       	mov	r11, r31
 7c2:	f0 2d       	mov	r31, r0
#include "keypad.h"
#include "LCD.h"
#define F_CPU 8000000UL
#include <util/delay.h>
#include "EEPROM.h"
int main(void)
 7c4:	0f 2e       	mov	r0, r31
 7c6:	f5 e0       	ldi	r31, 0x05	; 5
 7c8:	ef 2e       	mov	r14, r31
 7ca:	ff 24       	eor	r15, r15
 7cc:	f0 2d       	mov	r31, r0
 7ce:	ec 0e       	add	r14, r28
 7d0:	fd 1e       	adc	r15, r29
				LCD_send_string("  RIGHT");
				break;
			}
			else
			{
				LCD_send_string(" wrong try again");
 7d2:	0f 2e       	mov	r0, r31
 7d4:	fe eb       	ldi	r31, 0xBE	; 190
 7d6:	8f 2e       	mov	r8, r31
 7d8:	f0 e0       	ldi	r31, 0x00	; 0
 7da:	9f 2e       	mov	r9, r31
 7dc:	f0 2d       	mov	r31, r0
	else 
	{
		char i,x=10,r[4],n[4],f=0;
		while(f!=2)
		{
			LCD_clearscreen();
 7de:	0e 94 aa 05 	call	0xb54	; 0xb54 <LCD_clearscreen>
			LCD_send_string("  password");
 7e2:	c5 01       	movw	r24, r10
 7e4:	0e 94 9b 05 	call	0xb36	; 0xb36 <LCD_send_string>
			LCD_movecursor(2,1);
 7e8:	82 e0       	ldi	r24, 0x02	; 2
 7ea:	61 e0       	ldi	r22, 0x01	; 1
 7ec:	0e 94 b4 05 	call	0xb68	; 0xb68 <LCD_movecursor>
 7f0:	8e 01       	movw	r16, r28
 7f2:	0f 5f       	subi	r16, 0xFF	; 255
 7f4:	1f 4f       	sbci	r17, 0xFF	; 255
			
			for (i=0;i<4;i++)
			{
				while(x==10 || x==NOTPRESSED)
				{
					x=keypad_check_press();
 7f6:	0e 94 9f 04 	call	0x93e	; 0x93e <keypad_check_press>
			LCD_send_string("  password");
			LCD_movecursor(2,1);
			
			for (i=0;i<4;i++)
			{
				while(x==10 || x==NOTPRESSED)
 7fa:	8a 30       	cpi	r24, 0x0A	; 10
 7fc:	e1 f3       	breq	.-8      	; 0x7f6 <main+0x2cc>
 7fe:	8f 3f       	cpi	r24, 0xFF	; 255
 800:	d1 f3       	breq	.-12     	; 0x7f6 <main+0x2cc>
 802:	2f ef       	ldi	r18, 0xFF	; 255
 804:	32 e5       	ldi	r19, 0x52	; 82
 806:	47 e0       	ldi	r20, 0x07	; 7
 808:	21 50       	subi	r18, 0x01	; 1
 80a:	30 40       	sbci	r19, 0x00	; 0
 80c:	40 40       	sbci	r20, 0x00	; 0
 80e:	e1 f7       	brne	.-8      	; 0x808 <main+0x2de>
 810:	00 c0       	rjmp	.+0      	; 0x812 <main+0x2e8>
 812:	00 00       	nop
				{
					x=keypad_check_press();
				}
				_delay_ms(300);
				n[i]=x;
 814:	d8 01       	movw	r26, r16
 816:	8d 93       	st	X+, r24
 818:	8d 01       	movw	r16, r26
				LCD_send_char('*');
 81a:	8a e2       	ldi	r24, 0x2A	; 42
 81c:	0e 94 74 05 	call	0xae8	; 0xae8 <LCD_send_char>
		{
			LCD_clearscreen();
			LCD_send_string("  password");
			LCD_movecursor(2,1);
			
			for (i=0;i<4;i++)
 820:	0e 15       	cp	r16, r14
 822:	1f 05       	cpc	r17, r15
 824:	41 f7       	brne	.-48     	; 0x7f6 <main+0x2cc>
				LCD_send_char('*');
				x=10;
			}
			
			
			if (n[0]==EEPROM_read(10) && n[1]==EEPROM_read(11)&& n[2]==EEPROM_read(12) && n[3]==EEPROM_read(13) )
 826:	19 81       	ldd	r17, Y+1	; 0x01
 828:	8a e0       	ldi	r24, 0x0A	; 10
 82a:	90 e0       	ldi	r25, 0x00	; 0
 82c:	0e 94 90 02 	call	0x520	; 0x520 <EEPROM_read>
 830:	18 17       	cp	r17, r24
 832:	d1 f4       	brne	.+52     	; 0x868 <__stack+0x9>
 834:	1a 81       	ldd	r17, Y+2	; 0x02
 836:	8b e0       	ldi	r24, 0x0B	; 11
 838:	90 e0       	ldi	r25, 0x00	; 0
 83a:	0e 94 90 02 	call	0x520	; 0x520 <EEPROM_read>
 83e:	18 17       	cp	r17, r24
 840:	99 f4       	brne	.+38     	; 0x868 <__stack+0x9>
 842:	1b 81       	ldd	r17, Y+3	; 0x03
 844:	8c e0       	ldi	r24, 0x0C	; 12
 846:	90 e0       	ldi	r25, 0x00	; 0
 848:	0e 94 90 02 	call	0x520	; 0x520 <EEPROM_read>
 84c:	18 17       	cp	r17, r24
 84e:	61 f4       	brne	.+24     	; 0x868 <__stack+0x9>
 850:	1c 81       	ldd	r17, Y+4	; 0x04
 852:	8d e0       	ldi	r24, 0x0D	; 13
 854:	90 e0       	ldi	r25, 0x00	; 0
 856:	0e 94 90 02 	call	0x520	; 0x520 <EEPROM_read>
 85a:	18 17       	cp	r17, r24
 85c:	29 f4       	brne	.+10     	; 0x868 <__stack+0x9>
			{
				LCD_send_string("  RIGHT");
 85e:	8c e9       	ldi	r24, 0x9C	; 156
 860:	90 e0       	ldi	r25, 0x00	; 0
 862:	0e 94 9b 05 	call	0xb36	; 0xb36 <LCD_send_string>
				break;
 866:	15 c0       	rjmp	.+42     	; 0x892 <__stack+0x33>
			}
			else
			{
				LCD_send_string(" wrong try again");
 868:	c4 01       	movw	r24, r8
 86a:	0e 94 9b 05 	call	0xb36	; 0xb36 <LCD_send_string>
 86e:	2f ef       	ldi	r18, 0xFF	; 255
 870:	39 e6       	ldi	r19, 0x69	; 105
 872:	48 e1       	ldi	r20, 0x18	; 24
 874:	21 50       	subi	r18, 0x01	; 1
 876:	30 40       	sbci	r19, 0x00	; 0
 878:	40 40       	sbci	r20, 0x00	; 0
 87a:	e1 f7       	brne	.-8      	; 0x874 <__stack+0x15>
 87c:	00 c0       	rjmp	.+0      	; 0x87e <__stack+0x1f>
 87e:	00 00       	nop
 880:	ca 94       	dec	r12
				_delay_ms(1000);
				f++;
			}
			if (f==2)
 882:	09 f0       	breq	.+2      	; 0x886 <__stack+0x27>
 884:	ac cf       	rjmp	.-168    	; 0x7de <main+0x2b4>
			{
				LCD_clearscreen();
 886:	0e 94 aa 05 	call	0xb54	; 0xb54 <LCD_clearscreen>
				LCD_send_string("  thief");
 88a:	86 eb       	ldi	r24, 0xB6	; 182
 88c:	90 e0       	ldi	r25, 0x00	; 0
 88e:	0e 94 9b 05 	call	0xb36	; 0xb36 <LCD_send_string>
		}
	}
	
	
	
 892:	80 e0       	ldi	r24, 0x00	; 0
 894:	90 e0       	ldi	r25, 0x00	; 0
 896:	28 96       	adiw	r28, 0x08	; 8
 898:	0f b6       	in	r0, 0x3f	; 63
 89a:	f8 94       	cli
 89c:	de bf       	out	0x3e, r29	; 62
 89e:	0f be       	out	0x3f, r0	; 63
 8a0:	cd bf       	out	0x3d, r28	; 61
 8a2:	df 91       	pop	r29
 8a4:	cf 91       	pop	r28
 8a6:	1f 91       	pop	r17
 8a8:	0f 91       	pop	r16
 8aa:	ff 90       	pop	r15
 8ac:	ef 90       	pop	r14
 8ae:	df 90       	pop	r13
 8b0:	cf 90       	pop	r12
 8b2:	bf 90       	pop	r11
 8b4:	af 90       	pop	r10
 8b6:	9f 90       	pop	r9
 8b8:	8f 90       	pop	r8
 8ba:	7f 90       	pop	r7
 8bc:	6f 90       	pop	r6
 8be:	5f 90       	pop	r5
 8c0:	4f 90       	pop	r4
 8c2:	08 95       	ret

000008c4 <keypad_Init>:

#include "keypad.h"
#include "DIO.h"
void keypad_Init()
{
	set_pin('D',0,1);
 8c4:	84 e4       	ldi	r24, 0x44	; 68
 8c6:	60 e0       	ldi	r22, 0x00	; 0
 8c8:	41 e0       	ldi	r20, 0x01	; 1
 8ca:	0e 94 54 00 	call	0xa8	; 0xa8 <set_pin>
	set_pin('D',1,1);
 8ce:	84 e4       	ldi	r24, 0x44	; 68
 8d0:	61 e0       	ldi	r22, 0x01	; 1
 8d2:	41 e0       	ldi	r20, 0x01	; 1
 8d4:	0e 94 54 00 	call	0xa8	; 0xa8 <set_pin>
	set_pin('D',2,1);
 8d8:	84 e4       	ldi	r24, 0x44	; 68
 8da:	62 e0       	ldi	r22, 0x02	; 2
 8dc:	41 e0       	ldi	r20, 0x01	; 1
 8de:	0e 94 54 00 	call	0xa8	; 0xa8 <set_pin>
	set_pin('D',3,1);
 8e2:	84 e4       	ldi	r24, 0x44	; 68
 8e4:	63 e0       	ldi	r22, 0x03	; 3
 8e6:	41 e0       	ldi	r20, 0x01	; 1
 8e8:	0e 94 54 00 	call	0xa8	; 0xa8 <set_pin>
	set_pin('D',4,0);
 8ec:	84 e4       	ldi	r24, 0x44	; 68
 8ee:	64 e0       	ldi	r22, 0x04	; 4
 8f0:	40 e0       	ldi	r20, 0x00	; 0
 8f2:	0e 94 54 00 	call	0xa8	; 0xa8 <set_pin>
	set_pin('D',5,0);
 8f6:	84 e4       	ldi	r24, 0x44	; 68
 8f8:	65 e0       	ldi	r22, 0x05	; 5
 8fa:	40 e0       	ldi	r20, 0x00	; 0
 8fc:	0e 94 54 00 	call	0xa8	; 0xa8 <set_pin>
	set_pin('D',6,0);
 900:	84 e4       	ldi	r24, 0x44	; 68
 902:	66 e0       	ldi	r22, 0x06	; 6
 904:	40 e0       	ldi	r20, 0x00	; 0
 906:	0e 94 54 00 	call	0xa8	; 0xa8 <set_pin>
	set_pin('D',7,0);
 90a:	84 e4       	ldi	r24, 0x44	; 68
 90c:	67 e0       	ldi	r22, 0x07	; 7
 90e:	40 e0       	ldi	r20, 0x00	; 0
 910:	0e 94 54 00 	call	0xa8	; 0xa8 <set_pin>
	write_pin('D',4,1);
 914:	84 e4       	ldi	r24, 0x44	; 68
 916:	64 e0       	ldi	r22, 0x04	; 4
 918:	41 e0       	ldi	r20, 0x01	; 1
 91a:	0e 94 e5 00 	call	0x1ca	; 0x1ca <write_pin>
	write_pin('D',5,1);
 91e:	84 e4       	ldi	r24, 0x44	; 68
 920:	65 e0       	ldi	r22, 0x05	; 5
 922:	41 e0       	ldi	r20, 0x01	; 1
 924:	0e 94 e5 00 	call	0x1ca	; 0x1ca <write_pin>
	write_pin('D',6,1);
 928:	84 e4       	ldi	r24, 0x44	; 68
 92a:	66 e0       	ldi	r22, 0x06	; 6
 92c:	41 e0       	ldi	r20, 0x01	; 1
 92e:	0e 94 e5 00 	call	0x1ca	; 0x1ca <write_pin>
	write_pin('D',7,1);
 932:	84 e4       	ldi	r24, 0x44	; 68
 934:	67 e0       	ldi	r22, 0x07	; 7
 936:	41 e0       	ldi	r20, 0x01	; 1
 938:	0e 94 e5 00 	call	0x1ca	; 0x1ca <write_pin>
}
 93c:	08 95       	ret

0000093e <keypad_check_press>:

char  keypad_check_press()
{
 93e:	0f 93       	push	r16
 940:	1f 93       	push	r17
 942:	cf 93       	push	r28
 944:	df 93       	push	r29
 946:	cd b7       	in	r28, 0x3d	; 61
 948:	de b7       	in	r29, 0x3e	; 62
 94a:	60 97       	sbiw	r28, 0x10	; 16
 94c:	0f b6       	in	r0, 0x3f	; 63
 94e:	f8 94       	cli
 950:	de bf       	out	0x3e, r29	; 62
 952:	0f be       	out	0x3f, r0	; 63
 954:	cd bf       	out	0x3d, r28	; 61
char arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
 956:	de 01       	movw	r26, r28
 958:	11 96       	adiw	r26, 0x01	; 1
 95a:	ef ec       	ldi	r30, 0xCF	; 207
 95c:	f0 e0       	ldi	r31, 0x00	; 0
 95e:	80 e1       	ldi	r24, 0x10	; 16
 960:	01 90       	ld	r0, Z+
 962:	0d 92       	st	X+, r0
 964:	81 50       	subi	r24, 0x01	; 1
 966:	e1 f7       	brne	.-8      	; 0x960 <keypad_check_press+0x22>
char row,coloumn,x;
char returnval=NOTPRESSED;
for(row=0;row<4;row++)
 968:	00 e0       	ldi	r16, 0x00	; 0
{
	write_pin('D',0,1);
 96a:	84 e4       	ldi	r24, 0x44	; 68
 96c:	60 e0       	ldi	r22, 0x00	; 0
 96e:	41 e0       	ldi	r20, 0x01	; 1
 970:	0e 94 e5 00 	call	0x1ca	; 0x1ca <write_pin>
	write_pin('D',1,1);
 974:	84 e4       	ldi	r24, 0x44	; 68
 976:	61 e0       	ldi	r22, 0x01	; 1
 978:	41 e0       	ldi	r20, 0x01	; 1
 97a:	0e 94 e5 00 	call	0x1ca	; 0x1ca <write_pin>
	write_pin('D',2,1);
 97e:	84 e4       	ldi	r24, 0x44	; 68
 980:	62 e0       	ldi	r22, 0x02	; 2
 982:	41 e0       	ldi	r20, 0x01	; 1
 984:	0e 94 e5 00 	call	0x1ca	; 0x1ca <write_pin>
	write_pin('D',3,1);
 988:	84 e4       	ldi	r24, 0x44	; 68
 98a:	63 e0       	ldi	r22, 0x03	; 3
 98c:	41 e0       	ldi	r20, 0x01	; 1
 98e:	0e 94 e5 00 	call	0x1ca	; 0x1ca <write_pin>
	write_pin('D',row,0);
 992:	84 e4       	ldi	r24, 0x44	; 68
 994:	60 2f       	mov	r22, r16
 996:	40 e0       	ldi	r20, 0x00	; 0
 998:	0e 94 e5 00 	call	0x1ca	; 0x1ca <write_pin>
	for(coloumn=0;coloumn<4;coloumn++)
 99c:	10 e0       	ldi	r17, 0x00	; 0
	{
		x=read_pin('D',(coloumn+4));
 99e:	61 2f       	mov	r22, r17
 9a0:	6c 5f       	subi	r22, 0xFC	; 252
 9a2:	84 e4       	ldi	r24, 0x44	; 68
 9a4:	0e 94 76 01 	call	0x2ec	; 0x2ec <read_pin>
		if(x==0)
 9a8:	88 23       	and	r24, r24
 9aa:	61 f4       	brne	.+24     	; 0x9c4 <keypad_check_press+0x86>
		{
			returnval=arr[row][coloumn];
 9ac:	e0 2f       	mov	r30, r16
 9ae:	f0 e0       	ldi	r31, 0x00	; 0
 9b0:	ee 0f       	add	r30, r30
 9b2:	ff 1f       	adc	r31, r31
 9b4:	ee 0f       	add	r30, r30
 9b6:	ff 1f       	adc	r31, r31
 9b8:	e1 0f       	add	r30, r17
 9ba:	f1 1d       	adc	r31, r1
 9bc:	ec 0f       	add	r30, r28
 9be:	fd 1f       	adc	r31, r29
 9c0:	81 81       	ldd	r24, Z+1	; 0x01
 9c2:	04 c0       	rjmp	.+8      	; 0x9cc <keypad_check_press+0x8e>
	write_pin('D',0,1);
	write_pin('D',1,1);
	write_pin('D',2,1);
	write_pin('D',3,1);
	write_pin('D',row,0);
	for(coloumn=0;coloumn<4;coloumn++)
 9c4:	1f 5f       	subi	r17, 0xFF	; 255
 9c6:	14 30       	cpi	r17, 0x04	; 4
 9c8:	51 f7       	brne	.-44     	; 0x99e <keypad_check_press+0x60>
 9ca:	0b c0       	rjmp	.+22     	; 0x9e2 <keypad_check_press+0xa4>
	{
		break;
	}
}
return returnval ;
 }
 9cc:	60 96       	adiw	r28, 0x10	; 16
 9ce:	0f b6       	in	r0, 0x3f	; 63
 9d0:	f8 94       	cli
 9d2:	de bf       	out	0x3e, r29	; 62
 9d4:	0f be       	out	0x3f, r0	; 63
 9d6:	cd bf       	out	0x3d, r28	; 61
 9d8:	df 91       	pop	r29
 9da:	cf 91       	pop	r28
 9dc:	1f 91       	pop	r17
 9de:	0f 91       	pop	r16
 9e0:	08 95       	ret
char  keypad_check_press()
{
char arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
char row,coloumn,x;
char returnval=NOTPRESSED;
for(row=0;row<4;row++)
 9e2:	0f 5f       	subi	r16, 0xFF	; 255
 9e4:	04 30       	cpi	r16, 0x04	; 4
 9e6:	09 f6       	brne	.-126    	; 0x96a <keypad_check_press+0x2c>
 9e8:	8f ef       	ldi	r24, 0xFF	; 255
 9ea:	f0 cf       	rjmp	.-32     	; 0x9cc <keypad_check_press+0x8e>

000009ec <send_falling_edge>:
	 #endif
 }

static void send_falling_edge(void)
{
	write_pin('a',EN,1);
 9ec:	81 e6       	ldi	r24, 0x61	; 97
 9ee:	60 e0       	ldi	r22, 0x00	; 0
 9f0:	41 e0       	ldi	r20, 0x01	; 1
 9f2:	0e 94 e5 00 	call	0x1ca	; 0x1ca <write_pin>
 9f6:	8f e9       	ldi	r24, 0x9F	; 159
 9f8:	9f e0       	ldi	r25, 0x0F	; 15
 9fa:	01 97       	sbiw	r24, 0x01	; 1
 9fc:	f1 f7       	brne	.-4      	; 0x9fa <send_falling_edge+0xe>
 9fe:	00 c0       	rjmp	.+0      	; 0xa00 <send_falling_edge+0x14>
 a00:	00 00       	nop
	_delay_ms(2);
	write_pin('a',EN,0);
 a02:	81 e6       	ldi	r24, 0x61	; 97
 a04:	60 e0       	ldi	r22, 0x00	; 0
 a06:	40 e0       	ldi	r20, 0x00	; 0
 a08:	0e 94 e5 00 	call	0x1ca	; 0x1ca <write_pin>
 a0c:	8f e9       	ldi	r24, 0x9F	; 159
 a0e:	9f e0       	ldi	r25, 0x0F	; 15
 a10:	01 97       	sbiw	r24, 0x01	; 1
 a12:	f1 f7       	brne	.-4      	; 0xa10 <send_falling_edge+0x24>
 a14:	00 c0       	rjmp	.+0      	; 0xa16 <send_falling_edge+0x2a>
 a16:	00 00       	nop
	_delay_ms(2);
}
 a18:	08 95       	ret

00000a1a <LCD_send_cmd>:

void LCD_send_cmd(char cmd)
{
 a1a:	cf 93       	push	r28
 a1c:	c8 2f       	mov	r28, r24
	write_port('A',cmd);
	write_pin('a',RS,0);
	send_falling_edge();

	#elif defined four_bits_mode
	write_port('A',(PORTA & 0x0f)|(cmd&0xf0));
 a1e:	6b b3       	in	r22, 0x1b	; 27
 a20:	80 7f       	andi	r24, 0xF0	; 240
 a22:	6f 70       	andi	r22, 0x0F	; 15
 a24:	68 2b       	or	r22, r24
 a26:	81 e4       	ldi	r24, 0x41	; 65
 a28:	0e 94 4a 02 	call	0x494	; 0x494 <write_port>
	write_pin('a',RS,0);
 a2c:	81 e6       	ldi	r24, 0x61	; 97
 a2e:	61 e0       	ldi	r22, 0x01	; 1
 a30:	40 e0       	ldi	r20, 0x00	; 0
 a32:	0e 94 e5 00 	call	0x1ca	; 0x1ca <write_pin>
	send_falling_edge();
 a36:	0e 94 f6 04 	call	0x9ec	; 0x9ec <send_falling_edge>
	write_port('A',(PORTA & 0x0f)|(cmd<<4));
 a3a:	6b b3       	in	r22, 0x1b	; 27
 a3c:	c2 95       	swap	r28
 a3e:	c0 7f       	andi	r28, 0xF0	; 240
 a40:	6f 70       	andi	r22, 0x0F	; 15
 a42:	6c 2b       	or	r22, r28
 a44:	81 e4       	ldi	r24, 0x41	; 65
 a46:	0e 94 4a 02 	call	0x494	; 0x494 <write_port>
	write_pin('a',RS,0);
 a4a:	81 e6       	ldi	r24, 0x61	; 97
 a4c:	61 e0       	ldi	r22, 0x01	; 1
 a4e:	40 e0       	ldi	r20, 0x00	; 0
 a50:	0e 94 e5 00 	call	0x1ca	; 0x1ca <write_pin>
	send_falling_edge();
 a54:	0e 94 f6 04 	call	0x9ec	; 0x9ec <send_falling_edge>
 a58:	8f ec       	ldi	r24, 0xCF	; 207
 a5a:	97 e0       	ldi	r25, 0x07	; 7
 a5c:	01 97       	sbiw	r24, 0x01	; 1
 a5e:	f1 f7       	brne	.-4      	; 0xa5c <LCD_send_cmd+0x42>
 a60:	00 c0       	rjmp	.+0      	; 0xa62 <LCD_send_cmd+0x48>
 a62:	00 00       	nop
	_delay_ms(1);
	#endif
}
 a64:	cf 91       	pop	r28
 a66:	08 95       	ret

00000a68 <LCD_Init>:
 a68:	8f ef       	ldi	r24, 0xFF	; 255
 a6a:	91 ee       	ldi	r25, 0xE1	; 225
 a6c:	a4 e0       	ldi	r26, 0x04	; 4
 a6e:	81 50       	subi	r24, 0x01	; 1
 a70:	90 40       	sbci	r25, 0x00	; 0
 a72:	a0 40       	sbci	r26, 0x00	; 0
 a74:	e1 f7       	brne	.-8      	; 0xa6e <LCD_Init+0x6>
 a76:	00 c0       	rjmp	.+0      	; 0xa78 <LCD_Init+0x10>
 a78:	00 00       	nop
	_delay_ms(10);
	LCD_send_cmd(ENTRY_MODE); //entry mode
	_delay_ms(1);
	
	#elif defined four_bits_mode
	set_port('a',0xff);
 a7a:	81 e6       	ldi	r24, 0x61	; 97
 a7c:	6f ef       	ldi	r22, 0xFF	; 255
 a7e:	0e 94 2b 02 	call	0x456	; 0x456 <set_port>
	write_pin('a',RW,0);
 a82:	81 e6       	ldi	r24, 0x61	; 97
 a84:	62 e0       	ldi	r22, 0x02	; 2
 a86:	40 e0       	ldi	r20, 0x00	; 0
 a88:	0e 94 e5 00 	call	0x1ca	; 0x1ca <write_pin>
	 LCD_send_cmd(RETURN_HOME); //return home
 a8c:	82 e0       	ldi	r24, 0x02	; 2
 a8e:	0e 94 0d 05 	call	0xa1a	; 0xa1a <LCD_send_cmd>
 a92:	af e1       	ldi	r26, 0x1F	; 31
 a94:	be e4       	ldi	r27, 0x4E	; 78
 a96:	11 97       	sbiw	r26, 0x01	; 1
 a98:	f1 f7       	brne	.-4      	; 0xa96 <LCD_Init+0x2e>
 a9a:	00 c0       	rjmp	.+0      	; 0xa9c <LCD_Init+0x34>
 a9c:	00 00       	nop
	 _delay_ms(10);
	 //LCD_send_cmd(0x33);
	 //LCD_send_cmd(0x32);  
	 LCD_send_cmd(FOUR_BITS); //4bit mode
 a9e:	88 e2       	ldi	r24, 0x28	; 40
 aa0:	0e 94 0d 05 	call	0xa1a	; 0xa1a <LCD_send_cmd>
 aa4:	8f ec       	ldi	r24, 0xCF	; 207
 aa6:	97 e0       	ldi	r25, 0x07	; 7
 aa8:	01 97       	sbiw	r24, 0x01	; 1
 aaa:	f1 f7       	brne	.-4      	; 0xaa8 <LCD_Init+0x40>
 aac:	00 c0       	rjmp	.+0      	; 0xaae <LCD_Init+0x46>
 aae:	00 00       	nop
	 _delay_ms(1);
	 LCD_send_cmd(CURSOR_ON_DISPLAN_ON);//display on cursor on
 ab0:	8e e0       	ldi	r24, 0x0E	; 14
 ab2:	0e 94 0d 05 	call	0xa1a	; 0xa1a <LCD_send_cmd>
 ab6:	af ec       	ldi	r26, 0xCF	; 207
 ab8:	b7 e0       	ldi	r27, 0x07	; 7
 aba:	11 97       	sbiw	r26, 0x01	; 1
 abc:	f1 f7       	brne	.-4      	; 0xaba <LCD_Init+0x52>
 abe:	00 c0       	rjmp	.+0      	; 0xac0 <LCD_Init+0x58>
 ac0:	00 00       	nop
	 _delay_ms(1);
	 LCD_send_cmd(CLR_SCREEN);//clear the screen
 ac2:	81 e0       	ldi	r24, 0x01	; 1
 ac4:	0e 94 0d 05 	call	0xa1a	; 0xa1a <LCD_send_cmd>
 ac8:	8f e1       	ldi	r24, 0x1F	; 31
 aca:	9e e4       	ldi	r25, 0x4E	; 78
 acc:	01 97       	sbiw	r24, 0x01	; 1
 ace:	f1 f7       	brne	.-4      	; 0xacc <LCD_Init+0x64>
 ad0:	00 c0       	rjmp	.+0      	; 0xad2 <LCD_Init+0x6a>
 ad2:	00 00       	nop
	 _delay_ms(10);
	 LCD_send_cmd(ENTRY_MODE); //entry mode
 ad4:	86 e0       	ldi	r24, 0x06	; 6
 ad6:	0e 94 0d 05 	call	0xa1a	; 0xa1a <LCD_send_cmd>
 ada:	af ec       	ldi	r26, 0xCF	; 207
 adc:	b7 e0       	ldi	r27, 0x07	; 7
 ade:	11 97       	sbiw	r26, 0x01	; 1
 ae0:	f1 f7       	brne	.-4      	; 0xade <LCD_Init+0x76>
 ae2:	00 c0       	rjmp	.+0      	; 0xae4 <LCD_Init+0x7c>
 ae4:	00 00       	nop
	 _delay_ms(1);
	 #endif
 }
 ae6:	08 95       	ret

00000ae8 <LCD_send_char>:
	#endif
}


void LCD_send_char(char data)
{
 ae8:	cf 93       	push	r28
 aea:	c8 2f       	mov	r28, r24
	write_port('A',data);
	write_pin('a',RS,1);
	send_falling_edge();

	#elif defined four_bits_mode
	write_port('A',(PORTA & 0x0f)|(data&0xf0));
 aec:	6b b3       	in	r22, 0x1b	; 27
 aee:	80 7f       	andi	r24, 0xF0	; 240
 af0:	6f 70       	andi	r22, 0x0F	; 15
 af2:	68 2b       	or	r22, r24
 af4:	81 e4       	ldi	r24, 0x41	; 65
 af6:	0e 94 4a 02 	call	0x494	; 0x494 <write_port>
	write_pin('a',RS,1);
 afa:	81 e6       	ldi	r24, 0x61	; 97
 afc:	61 e0       	ldi	r22, 0x01	; 1
 afe:	41 e0       	ldi	r20, 0x01	; 1
 b00:	0e 94 e5 00 	call	0x1ca	; 0x1ca <write_pin>
	send_falling_edge();
 b04:	0e 94 f6 04 	call	0x9ec	; 0x9ec <send_falling_edge>
	write_port('A',(PORTA & 0x0f)|(data<<4));
 b08:	6b b3       	in	r22, 0x1b	; 27
 b0a:	c2 95       	swap	r28
 b0c:	c0 7f       	andi	r28, 0xF0	; 240
 b0e:	6f 70       	andi	r22, 0x0F	; 15
 b10:	6c 2b       	or	r22, r28
 b12:	81 e4       	ldi	r24, 0x41	; 65
 b14:	0e 94 4a 02 	call	0x494	; 0x494 <write_port>
	write_pin('a',RS,1);
 b18:	81 e6       	ldi	r24, 0x61	; 97
 b1a:	61 e0       	ldi	r22, 0x01	; 1
 b1c:	41 e0       	ldi	r20, 0x01	; 1
 b1e:	0e 94 e5 00 	call	0x1ca	; 0x1ca <write_pin>
	send_falling_edge();
 b22:	0e 94 f6 04 	call	0x9ec	; 0x9ec <send_falling_edge>
 b26:	8f ec       	ldi	r24, 0xCF	; 207
 b28:	97 e0       	ldi	r25, 0x07	; 7
 b2a:	01 97       	sbiw	r24, 0x01	; 1
 b2c:	f1 f7       	brne	.-4      	; 0xb2a <LCD_send_char+0x42>
 b2e:	00 c0       	rjmp	.+0      	; 0xb30 <LCD_send_char+0x48>
 b30:	00 00       	nop
	_delay_ms(1);
	#endif
}
 b32:	cf 91       	pop	r28
 b34:	08 95       	ret

00000b36 <LCD_send_string>:

void LCD_send_string(char *data)
{
 b36:	cf 93       	push	r28
 b38:	df 93       	push	r29
 b3a:	ec 01       	movw	r28, r24
	while((*data)!='\0')
 b3c:	88 81       	ld	r24, Y
 b3e:	88 23       	and	r24, r24
 b40:	31 f0       	breq	.+12     	; 0xb4e <LCD_send_string+0x18>
	send_falling_edge();
	_delay_ms(1);
	#endif
}

void LCD_send_string(char *data)
 b42:	21 96       	adiw	r28, 0x01	; 1
{
	while((*data)!='\0')
	{
		LCD_send_char(*data);
 b44:	0e 94 74 05 	call	0xae8	; 0xae8 <LCD_send_char>
	#endif
}

void LCD_send_string(char *data)
{
	while((*data)!='\0')
 b48:	89 91       	ld	r24, Y+
 b4a:	88 23       	and	r24, r24
 b4c:	d9 f7       	brne	.-10     	; 0xb44 <LCD_send_string+0xe>
	{
		LCD_send_char(*data);
		data++;
	}
}
 b4e:	df 91       	pop	r29
 b50:	cf 91       	pop	r28
 b52:	08 95       	ret

00000b54 <LCD_clearscreen>:
void LCD_clearscreen()
{
	LCD_send_cmd(CLR_SCREEN);
 b54:	81 e0       	ldi	r24, 0x01	; 1
 b56:	0e 94 0d 05 	call	0xa1a	; 0xa1a <LCD_send_cmd>
 b5a:	8f e1       	ldi	r24, 0x1F	; 31
 b5c:	9e e4       	ldi	r25, 0x4E	; 78
 b5e:	01 97       	sbiw	r24, 0x01	; 1
 b60:	f1 f7       	brne	.-4      	; 0xb5e <LCD_clearscreen+0xa>
 b62:	00 c0       	rjmp	.+0      	; 0xb64 <LCD_clearscreen+0x10>
 b64:	00 00       	nop
	_delay_ms(10);
}
 b66:	08 95       	ret

00000b68 <LCD_movecursor>:


void LCD_movecursor(char row,char coloumn)
{
	char data ;
	if(row>2||row<1||coloumn>16||coloumn<1)
 b68:	28 2f       	mov	r18, r24
 b6a:	21 50       	subi	r18, 0x01	; 1
 b6c:	22 30       	cpi	r18, 0x02	; 2
 b6e:	70 f4       	brcc	.+28     	; 0xb8c <LCD_movecursor+0x24>
 b70:	61 31       	cpi	r22, 0x11	; 17
 b72:	70 f4       	brcc	.+28     	; 0xb90 <LCD_movecursor+0x28>
 b74:	66 23       	and	r22, r22
 b76:	71 f0       	breq	.+28     	; 0xb94 <LCD_movecursor+0x2c>
	{
		data=0x80;
	}
	else if(row==1)
 b78:	81 30       	cpi	r24, 0x01	; 1
 b7a:	19 f4       	brne	.+6      	; 0xb82 <LCD_movecursor+0x1a>
	{
		data=0x80+coloumn-1 ;
 b7c:	96 2f       	mov	r25, r22
 b7e:	91 58       	subi	r25, 0x81	; 129
 b80:	0a c0       	rjmp	.+20     	; 0xb96 <LCD_movecursor+0x2e>
	}
	else if (row==2)
 b82:	82 30       	cpi	r24, 0x02	; 2
 b84:	41 f4       	brne	.+16     	; 0xb96 <LCD_movecursor+0x2e>
	{
		data=0xc0+coloumn-1;
 b86:	96 2f       	mov	r25, r22
 b88:	91 54       	subi	r25, 0x41	; 65
 b8a:	05 c0       	rjmp	.+10     	; 0xb96 <LCD_movecursor+0x2e>
void LCD_movecursor(char row,char coloumn)
{
	char data ;
	if(row>2||row<1||coloumn>16||coloumn<1)
	{
		data=0x80;
 b8c:	90 e8       	ldi	r25, 0x80	; 128
 b8e:	03 c0       	rjmp	.+6      	; 0xb96 <LCD_movecursor+0x2e>
 b90:	90 e8       	ldi	r25, 0x80	; 128
 b92:	01 c0       	rjmp	.+2      	; 0xb96 <LCD_movecursor+0x2e>
 b94:	90 e8       	ldi	r25, 0x80	; 128
	}
	else if (row==2)
	{
		data=0xc0+coloumn-1;
	}
	LCD_send_cmd(data);
 b96:	89 2f       	mov	r24, r25
 b98:	0e 94 0d 05 	call	0xa1a	; 0xa1a <LCD_send_cmd>
 b9c:	8f ec       	ldi	r24, 0xCF	; 207
 b9e:	97 e0       	ldi	r25, 0x07	; 7
 ba0:	01 97       	sbiw	r24, 0x01	; 1
 ba2:	f1 f7       	brne	.-4      	; 0xba0 <LCD_movecursor+0x38>
 ba4:	00 c0       	rjmp	.+0      	; 0xba6 <LCD_movecursor+0x3e>
 ba6:	00 00       	nop
	_delay_ms(1);
}
 ba8:	08 95       	ret

00000baa <led_init>:

#include "DIO.h"

void led_init (char port_name,char pin_number)
{
	set_pin(port_name, pin_number,1);
 baa:	41 e0       	ldi	r20, 0x01	; 1
 bac:	0e 94 54 00 	call	0xa8	; 0xa8 <set_pin>
}
 bb0:	08 95       	ret

00000bb2 <led_on>:
void led_on (char port_name,char pin_number)
{
	write_pin( port_name, pin_number,1);
 bb2:	41 e0       	ldi	r20, 0x01	; 1
 bb4:	0e 94 e5 00 	call	0x1ca	; 0x1ca <write_pin>
}
 bb8:	08 95       	ret

00000bba <led_off>:
void led_off (char port_name,char pin_number)
{
	write_pin( port_name, pin_number,0);
 bba:	40 e0       	ldi	r20, 0x00	; 0
 bbc:	0e 94 e5 00 	call	0x1ca	; 0x1ca <write_pin>
}
 bc0:	08 95       	ret

00000bc2 <led_tog>:
void led_tog (char port_name,char pin_number)
{
	toggle_pin( port_name, pin_number);
 bc2:	0e 94 de 01 	call	0x3bc	; 0x3bc <toggle_pin>
 bc6:	08 95       	ret

00000bc8 <_exit>:
 bc8:	f8 94       	cli

00000bca <__stop_program>:
 bca:	ff cf       	rjmp	.-2      	; 0xbca <__stop_program>
