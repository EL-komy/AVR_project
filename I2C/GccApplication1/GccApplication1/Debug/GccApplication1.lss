
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000194  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000194  00000208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000208  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  000008d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000c0  00000000  00000000  00000960  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005e9  00000000  00000000  00000a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001be  00000000  00000000  00001009  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004e3  00000000  00000000  000011c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b0  00000000  00000000  000016ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000188  00000000  00000000  0000175c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000c7  00000000  00000000  000018e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e9       	ldi	r30, 0x94	; 148
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 c8 00 	jmp	0x190	; 0x190 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#define F_CPU 8000000UL
#include <util/delay.h>
#include "I2C.h"

int main(void)
{
  92:	cf 93       	push	r28
	I2C_Master_init(50000);
  94:	60 e5       	ldi	r22, 0x50	; 80
  96:	73 ec       	ldi	r23, 0xC3	; 195
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	0e 94 6b 00 	call	0xd6	; 0xd6 <I2C_Master_init>
  a0:	c0 e3       	ldi	r28, 0x30	; 48
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	8f ef       	ldi	r24, 0xFF	; 255
  a4:	94 e3       	ldi	r25, 0x34	; 52
  a6:	ac e0       	ldi	r26, 0x0C	; 12
  a8:	81 50       	subi	r24, 0x01	; 1
  aa:	90 40       	sbci	r25, 0x00	; 0
  ac:	a0 40       	sbci	r26, 0x00	; 0
  ae:	e1 f7       	brne	.-8      	; 0xa8 <main+0x16>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <main+0x20>
  b2:	00 00       	nop
	unsigned char c=0;
	
    while(c<10)
    {
        _delay_ms(500);
		I2C_start();
  b4:	0e 94 7f 00 	call	0xfe	; 0xfe <I2C_start>
		I2C_Write_Address(0B11100000);
  b8:	80 ee       	ldi	r24, 0xE0	; 224
  ba:	0e 94 88 00 	call	0x110	; 0x110 <I2C_Write_Address>
		I2C_Write_Data(c+48);
  be:	8c 2f       	mov	r24, r28
  c0:	0e 94 8f 00 	call	0x11e	; 0x11e <I2C_Write_Data>
		I2C_stop();
  c4:	0e 94 85 00 	call	0x10a	; 0x10a <I2C_stop>
  c8:	cf 5f       	subi	r28, 0xFF	; 255
int main(void)
{
	I2C_Master_init(50000);
	unsigned char c=0;
	
    while(c<10)
  ca:	ca 33       	cpi	r28, 0x3A	; 58
  cc:	51 f7       	brne	.-44     	; 0xa2 <main+0x10>
		I2C_Write_Address(0B11100000);
		I2C_Write_Data(c+48);
		I2C_stop();
		c++;
    }
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	cf 91       	pop	r28
  d4:	08 95       	ret

000000d6 <I2C_Master_init>:
#include "std_macros.h"
#define F_CPU 8000000UL
#define  prescalar 1

void I2C_Master_init(unsigned long scl)
{
  d6:	9b 01       	movw	r18, r22
  d8:	ac 01       	movw	r20, r24
	TWBR= (unsigned char) (((F_CPU/scl)-16)/(2*prescalar));
  da:	60 e0       	ldi	r22, 0x00	; 0
  dc:	72 e1       	ldi	r23, 0x12	; 18
  de:	8a e7       	ldi	r24, 0x7A	; 122
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 a6 00 	call	0x14c	; 0x14c <__udivmodsi4>
  e6:	da 01       	movw	r26, r20
  e8:	c9 01       	movw	r24, r18
  ea:	40 97       	sbiw	r24, 0x10	; 16
  ec:	a1 09       	sbc	r26, r1
  ee:	b1 09       	sbc	r27, r1
  f0:	b6 95       	lsr	r27
  f2:	a7 95       	ror	r26
  f4:	97 95       	ror	r25
  f6:	87 95       	ror	r24
  f8:	80 b9       	out	0x00, r24	; 0
	if (prescalar==1)
	{
		TWSR=0;
  fa:	11 b8       	out	0x01, r1	; 1
	}
	else if (prescalar==64)
	{
		TWSR=3;
	}		
}
  fc:	08 95       	ret

000000fe <I2C_start>:

void I2C_start()
{
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTA);
  fe:	84 ea       	ldi	r24, 0xA4	; 164
 100:	86 bf       	out	0x36, r24	; 54
	while(READ_BIT(TWCR,TWINT)==0);
 102:	06 b6       	in	r0, 0x36	; 54
 104:	07 fe       	sbrs	r0, 7
 106:	fd cf       	rjmp	.-6      	; 0x102 <I2C_start+0x4>
	
}
 108:	08 95       	ret

0000010a <I2C_stop>:

void I2C_stop()
{
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
 10a:	84 e9       	ldi	r24, 0x94	; 148
 10c:	86 bf       	out	0x36, r24	; 54
}
 10e:	08 95       	ret

00000110 <I2C_Write_Address>:

void I2C_Write_Address(unsigned char adr)
{
	TWDR=adr;
 110:	83 b9       	out	0x03, r24	; 3
	TWCR=(1<<TWINT)|(1<<TWEN);
 112:	84 e8       	ldi	r24, 0x84	; 132
 114:	86 bf       	out	0x36, r24	; 54
	while(READ_BIT(TWCR,TWINT)==0);
 116:	06 b6       	in	r0, 0x36	; 54
 118:	07 fe       	sbrs	r0, 7
 11a:	fd cf       	rjmp	.-6      	; 0x116 <I2C_Write_Address+0x6>
}
 11c:	08 95       	ret

0000011e <I2C_Write_Data>:

void I2C_Write_Data(unsigned char data)
{
	TWDR=data;
 11e:	83 b9       	out	0x03, r24	; 3
	TWCR=(1<<TWINT)|(1<<TWEN);
 120:	84 e8       	ldi	r24, 0x84	; 132
 122:	86 bf       	out	0x36, r24	; 54
	while(READ_BIT(TWCR,TWINT)==0);
 124:	06 b6       	in	r0, 0x36	; 54
 126:	07 fe       	sbrs	r0, 7
 128:	fd cf       	rjmp	.-6      	; 0x124 <I2C_Write_Data+0x6>
}
 12a:	08 95       	ret

0000012c <I2C_Slave_init>:

void I2C_Slave_init(unsigned char addr)
{
	//TWCR=0x04;
	TWAR=addr;
 12c:	82 b9       	out	0x02, r24	; 2
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
 12e:	84 ec       	ldi	r24, 0xC4	; 196
 130:	86 bf       	out	0x36, r24	; 54
	
}
 132:	08 95       	ret

00000134 <I2C_Slave_read>:

unsigned char I2C_Slave_read()
{
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
 134:	84 ec       	ldi	r24, 0xC4	; 196
 136:	86 bf       	out	0x36, r24	; 54
	while(READ_BIT(TWCR,TWINT)==0);
 138:	06 b6       	in	r0, 0x36	; 54
 13a:	07 fe       	sbrs	r0, 7
 13c:	fd cf       	rjmp	.-6      	; 0x138 <I2C_Slave_read+0x4>
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
 13e:	84 ec       	ldi	r24, 0xC4	; 196
 140:	86 bf       	out	0x36, r24	; 54
	while(READ_BIT(TWCR,TWINT)==0);
 142:	06 b6       	in	r0, 0x36	; 54
 144:	07 fe       	sbrs	r0, 7
 146:	fd cf       	rjmp	.-6      	; 0x142 <I2C_Slave_read+0xe>
	
	return TWDR;
 148:	83 b1       	in	r24, 0x03	; 3
}
 14a:	08 95       	ret

0000014c <__udivmodsi4>:
 14c:	a1 e2       	ldi	r26, 0x21	; 33
 14e:	1a 2e       	mov	r1, r26
 150:	aa 1b       	sub	r26, r26
 152:	bb 1b       	sub	r27, r27
 154:	fd 01       	movw	r30, r26
 156:	0d c0       	rjmp	.+26     	; 0x172 <__udivmodsi4_ep>

00000158 <__udivmodsi4_loop>:
 158:	aa 1f       	adc	r26, r26
 15a:	bb 1f       	adc	r27, r27
 15c:	ee 1f       	adc	r30, r30
 15e:	ff 1f       	adc	r31, r31
 160:	a2 17       	cp	r26, r18
 162:	b3 07       	cpc	r27, r19
 164:	e4 07       	cpc	r30, r20
 166:	f5 07       	cpc	r31, r21
 168:	20 f0       	brcs	.+8      	; 0x172 <__udivmodsi4_ep>
 16a:	a2 1b       	sub	r26, r18
 16c:	b3 0b       	sbc	r27, r19
 16e:	e4 0b       	sbc	r30, r20
 170:	f5 0b       	sbc	r31, r21

00000172 <__udivmodsi4_ep>:
 172:	66 1f       	adc	r22, r22
 174:	77 1f       	adc	r23, r23
 176:	88 1f       	adc	r24, r24
 178:	99 1f       	adc	r25, r25
 17a:	1a 94       	dec	r1
 17c:	69 f7       	brne	.-38     	; 0x158 <__udivmodsi4_loop>
 17e:	60 95       	com	r22
 180:	70 95       	com	r23
 182:	80 95       	com	r24
 184:	90 95       	com	r25
 186:	9b 01       	movw	r18, r22
 188:	ac 01       	movw	r20, r24
 18a:	bd 01       	movw	r22, r26
 18c:	cf 01       	movw	r24, r30
 18e:	08 95       	ret

00000190 <_exit>:
 190:	f8 94       	cli

00000192 <__stop_program>:
 192:	ff cf       	rjmp	.-2      	; 0x192 <__stop_program>
